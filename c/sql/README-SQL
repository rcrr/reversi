
  README-SQL

  Copyright (c) 2015, 2018, 2019, 2020 Roberto Corradini. All rights reserved.

  This file is part of the reversi program
  http://github.com/rcrr/reversi

  This program is free software; you can redistribute it and/or modify it
  under the terms of the GNU General Public License as published by the
  Free Software Foundation; either version 3, or (at your option) any
  later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA
  or visit the site <http://www.gnu.org/licenses/>.

This file describes the configuration and settings done to prepare the SQL environment used to develop and execute
the REVERSI program.

Software components being used are:

 - Ubuntu 20.04 LTS (focal) (kernel 5.4) (x86_64)
 - postgres (PostgreSQL) 12.3 (Ubuntu 12.3-1.pgdg20.04+1)

A few useful commands:

To connect as postgres user:
 $ sudo su - postgres

To connect to PostgreSQL as superuser:
 $ sudo -u postgres psql postgres
or:
 $ sudo su - postgres
 $ psql -U postgres

When connected as postgres user (superuser):

 -- Double dash is a standard SQL comment.

 -- Lists the existing databases.
 postgres=# \list
 postgres=# \l+

 -- Lists the existing tablespaces.
 postgres=# \db+

 -- Shows where phisical database files are stored.
 postgres=# SHOW data_directory;

 -- Lists users.
 postgres=# SELECT rolname FROM pg_roles;

 -- Creates user 'es'.
 postgres=# CREATE ROLE es LOGIN;
 postgres=# ALTER ROLE es WITH PASSWORD 'es';
 postgres=# ALTER ROLE es VALID UNTIL 'infinity';
 
 -- Drops user 'es'.
 postgres=# DROP ROLE es;
 
 -- Creates tablespace 'es' in directory '/data/postgres/12/es'. The directory must exists and created by user postgres.
 postgres=# CREATE TABLESPACE es LOCATION '/data/postgres/12/es';

 -- Drops tablespace 'es'.
 postgres=# DROP TABLESPACE es;

 -- Creates database 'es'.
 postgres=# CREATE DATABASE es WITH OWNER es ENCODING 'UTF8' TABLESPACE es;

 -- Drops database 'es'.
 postgres=# DROP DATABASE es;

 -- Given that we have an 'es' database on an 'es' tablespace, owned by an 'es' user, generated by:
 postgres=# CREATE ROLE es LOGIN;
 postgres=# ALTER ROLE es WITH PASSWORD 'es';
 postgres=# ALTER ROLE es VALID UNTIL 'infinity';
 postgres=# CREATE TABLESPACE es LOCATION '/data/postgres/12/es';
 postgres=# CREATE DATABASE es WITH OWNER es ENCODING 'UTF8' TABLESPACE es;
 postgres=# GRANT ALL PRIVILEGES ON DATABASE es TO es;

Edit file .pgpass in your home directory and add a line like this:
localhost:5432:*:es:es
127.0.0.1:5432:*:es:es
 
We can connect to the new db by:
 $ psql -U es -d es -h localhost

In order to run the complete suite on db 'es' as user 'es'
 $ time psql -U es -d es -h localhost -c "\i reload_everything.sql"
 $ time psql -U es -d es -h localhost -c "\i 0100_up_regab_create_schema.sql"
 $ time psql -U es -d es -h localhost -c "\i 0101_up_migrations.sql"
 $ time psql -U es -d es -h localhost -c "\i 0102_up_gp_ext.sql"
 $ time psql -U es -d es -h localhost -c "\i 0103_up_patterns.sql"
 $ time psql -U es -d es -h localhost -c "\i 0104_up_pattern_functions.sql"
 $ time psql -U es -d es -h localhost -c "\i 0107_up_pattern_data.sql"
 $ time psql -U es -d es -h localhost -c "\i 0109_up_action_extract.sql"
 $ time psql -U es -d es -h localhost -c "\i 0110_up_gp_solver.sql"

 --
 -- Backup and restore procedure.
 --
 --
 -- Backup using the pg_dump utility:
 -- -d database_name
 -- -h hostname
 -- -p port
 -- -U user (it must be postgres or equivalent superuser)
 -- -v verbose output
 -- -Z compression level 0..9 (more than 4 gives back small benefit)
 -- -f target filename - selected format is YYYYMMDDHHMM-hostname-database_name.dump
 -- output redirected to a proper log file (same name convention
 --
$ pg_dump -d backup_db_name -h localhost -p 5432 -U postgres -v -Fc -Z2 -f out/201801031517-localhost-backup_db_name.dump 2> out/201801031517-localhost-backup_db_name.log
 -- or in background:
$ nohup time pg_dump -d backup_db_name -h localhost -p 5432 -U postgres -v -Fc -Z2 -f out/201801031517-localhost-backup_db_name.dump > out/201801031517-localhost-backup_db_name.log 2>&1& 
 --
 -- Given that we have a user named 'restore_db_name', and a tablespace with the same name, we can restore the dump by:
 postgres=# DROP DATABASE restore_db_name;
 postgres=# CREATE DATABASE restore_db_name WITH OWNER restore_db_name ENCODING 'UTF8' TABLESPACE restore_db_name;
 postgres=# GRANT ALL PRIVILEGES ON DATABASE restore_db_name TO restore_db_name;
 --
 -- Next time try to use the flag --jobs=number-of-job when restoring the DB ....
 --
 $ pg_restore --no-acl --no-owner -v -d restore_db_name -p 5432 -h localhost -U restore_db_name out/201801031517-localhost-backup_db_name.dump
 --
 -- Note: to avoid errors on setting the COMMENT on EXTENSION plpgsql, hstore, and uuid-ossp, like the following:
 --
    pg_restore: creating EXTENSION plpgsql
    pg_restore: creating COMMENT EXTENSION plpgsql
    pg_restore: [archiver (db)] Error while PROCESSING TOC:
    pg_restore: [archiver (db)] Error from TOC entry 2349; 0 0 COMMENT EXTENSION plpgsql 
    pg_restore: [archiver (db)] could not execute query: ERROR:  must be owner of extension plpgsql
        Command was: COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';
 --
 -- connect to the backup_db_name as postgres by:
 $ psql -U postgres -d backup_db_name -h localhost
 -- then issue these commands:
 # COMMENT ON EXTENSION plpgsql IS NULL;
 -- After this change perform the database dump.

--
--
-- 2021-02-27
--
-- Upgrade postgresql from 12.6 to 13.2
--
--

 $ sudo su - postgres

 $ psql -U postgres -p 5432 -c "SELECT version();"
                                                              version                                                              
 ----------------------------------------------------------------------------------------------------------------------------------
  PostgreSQL 12.6 (Ubuntu 12.6-1.pgdg20.04+1) on x86_64-pc-linux-gnu, compiled by gcc (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0, 64-bit
 (1 row)

 $ psql -U postgres -p 5433 -c "SELECT version();"
                                                             version                                                              
 ----------------------------------------------------------------------------------------------------------------------------------
  PostgreSQL 13.2 (Ubuntu 13.2-1.pgdg20.04+1) on x86_64-pc-linux-gnu, compiled by gcc (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0, 64-bit
 (1 row)

 $ mkdir /data/postgres/13
 $ mkdir /data/postgres/13/es

 $ psql -U postgres -p 5433
 psql (13.2 (Ubuntu 13.2-1.pgdg20.04+1))
 Type "help" for help.

 -- Given that we have an 'es' database on an 'es' tablespace, owned by an 'es' user, generated by:
 postgres=# CREATE ROLE es LOGIN;
 postgres=# ALTER ROLE es WITH PASSWORD 'es';
 postgres=# ALTER ROLE es VALID UNTIL 'infinity';
 postgres=# CREATE TABLESPACE es LOCATION '/data/postgres/13/es';
 postgres=# CREATE DATABASE es WITH OWNER es ENCODING 'UTF8' TABLESPACE es;
 postgres=# GRANT ALL PRIVILEGES ON DATABASE es TO es;

Edit file .pgpass in your home directory and add a line like this:
localhost:5433:*:es:es
127.0.0.1:5433:*:es:es

Be sure to have prepated needed files by running:
 $ make endgame_pv_files
 $ make endgame_log_files
 $ make dat2csv 
 
We can connect to the new db by:
 $ psql -U es -d es -h localhost -p 5433

In order to run the complete suite on db 'es' as user 'es':
 $ time psql -U es -d es -h localhost -p 5433 -c "\i reload_everything.sql"
 $ time psql -U es -d es -h localhost -p 5433 -c "\i 0100_up_regab_create_schema.sql"
 $ time psql -U es -d es -h localhost -p 5433 -c "\i 0101_up_migrations.sql"
 $ time psql -U es -d es -h localhost -p 5433 -c "\i 0102_up_gp_ext.sql"
 $ time psql -U es -d es -h localhost -p 5433 -c "\i 0103_up_patterns.sql"
 $ time psql -U es -d es -h localhost -p 5433 -c "\i 0104_up_pattern_functions.sql"
 $ time psql -U es -d es -h localhost -p 5433 -c "\i 0107_up_pattern_data.sql"
 $ time psql -U es -d es -h localhost -p 5433 -c "\i 0109_up_action_extract.sql"
 $ time psql -U es -d es -h localhost -p 5433 -c "\i 0110_up_gp_solver.sql "

--
-- The es database is completed.
--

 $ mkdir /data/postgres/13/tst_regab

 postgres=# CREATE ROLE tst_regab LOGIN;
 postgres=# ALTER ROLE tst_regab WITH PASSWORD 'tst_regab';
 postgres=# ALTER ROLE tst_regab VALID UNTIL 'infinity';
 postgres=# CREATE TABLESPACE tst_regab LOCATION '/data/postgres/13/tst_regab';
 postgres=# CREATE DATABASE tst_regab WITH OWNER tst_regab ENCODING 'UTF8' TABLESPACE tst_regab;
 postgres=# GRANT ALL PRIVILEGES ON DATABASE tst_regab TO tst_regab;

 $ pg_restore --no-acl --no-owner -v -d tst_regab -p 5433 -h localhost -U tst_regab 202102211228-vilya-prd_regab.dump

Edit the /etc/postgresql/13/main/postgresql.conf file.

Connect to postgresql 12 as postgres, and drop the es and tst_regab databases.

$ psql -U postgres -p 5432
psql (13.2 (Ubuntu 13.2-1.pgdg20.04+1), server 12.6 (Ubuntu 12.6-1.pgdg20.04+1))
Type "help" for help.

postgres=# \l
                                   List of databases
   Name    |   Owner   | Encoding |   Collate   |    Ctype    |    Access privileges    
-----------+-----------+----------+-------------+-------------+-------------------------
 es        | es        | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =Tc/es                 +
           |           |          |             |             | es=CTc/es
 postgres  | postgres  | UTF8     | en_US.UTF-8 | en_US.UTF-8 | 
 template0 | postgres  | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres            +
           |           |          |             |             | postgres=CTc/postgres
 template1 | postgres  | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres            +
           |           |          |             |             | postgres=CTc/postgres
 tst_regab | tst_regab | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =Tc/tst_regab          +
           |           |          |             |             | tst_regab=CTc/tst_regab
(5 rows)

postgres=# DROP DATABASE tst_regab;
DROP DATABASE
postgres=# DROP DATABASE es;
DROP DATABASE
postgres=# \l
                                  List of databases
   Name    |  Owner   | Encoding |   Collate   |    Ctype    |   Access privileges   
-----------+----------+----------+-------------+-------------+-----------------------
 postgres  | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | 
 template0 | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres          +
           |          |          |             |             | postgres=CTc/postgres
 template1 | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres          +
           |          |          |             |             | postgres=CTc/postgres
(3 rows)


-- Stop the postgres service:

 $ sudo service --status-all | grep postgresql
  [ + ]  postgresql
 $ sudo service postgresql stop
 $ sudo service --status-all | grep postgresql
  [ - ]  postgresql


-- Remove the postgres 12 software:

 $ sudo apt remove postgresql-12 postgresql-server-dev-12 postgresql-client-12

-- Change listening port from 5433 to 5432.
-- Restart postgresql.

 $ sudo service postgresql start
 $ sudo service --status-all | grep postgresql
 [ + ]  postgresql

--
-- Upgrade postgresql from 12.6 to 13.2 - DONE
--

