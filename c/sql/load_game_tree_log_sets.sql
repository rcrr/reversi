--
-- load_game_tree_log_sets.sql
--
-- This file is part of the reversi program
-- http://github.com/rcrr/reversi
--
-- Author: Roberto Corradini mailto:rob_corradini@yahoo.it
-- Copyright 2014, 2015, 2017, 2021 Roberto Corradini. All rights reserved.
--
--
-- License:
--
-- This program is free software; you can redistribute it and/or modify it
-- under the terms of the GNU General Public License as published by the
-- Free Software Foundation; either version 3, or (at your option) any
-- later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program; if not, write to the Free Software
-- Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA
-- or visit the site <http://www.gnu.org/licenses/>.
--
--
-- This script has been tested with PostgreSQL.
-- Start psql by running: psql -U es -w -d es -h localhost
-- Load the file by running the command: \i load_game_tree_log_sets.sql
--
--
-- This script loads game tree sets into the db, game_tree_log_header, and game_tree_log tables.
--

SET search_path TO reversi;

SELECT current_database() AS reversi_dbname
\gset
\setenv REVERSI_DBNAME :reversi_dbname
SELECT current_user AS reversi_username
\gset
\setenv REVERSI_USERNAME :reversi_username
SELECT inet_server_addr() AS reversi_server_addr;
\gset
\setenv REVERSI_SERVER_ADDR :reversi_server_addr
SELECT inet_server_port() AS reversi_ip_port;
\gset
\setenv REVERSI_IP_PORT :reversi_ip_port



--
-- File ../build/out/rab_solver_log-ffo-01-simplified-4_n3.csv is obtained by running
-- the command:
-- $ make endgame_log_files
-- or directly calling:
-- $ ./build/bin/endgame_solver -f db/gpdb-sample-games.txt -q ffo-01-simplified-4 -s rab -n 3 -l build/out/rab_solver_log-ffo-01-simplified-4_n3.csv
--
\! ./gt_load_file.sh $REVERSI_USERNAME $REVERSI_DBNAME $REVERSI_SERVER_ADDR $REVERSI_IP_PORT ../build/out/rab_solver_log-ffo-01-simplified-4_n3.csv;
SELECT gt_load_from_staging('T000', 'C_RAB_SOLVER', 'Test data obtained by the C rab solver on position ffo-01-simplified-4.');
VACUUM(FULL, ANALYZE) game_tree_log;
SELECT gt_check_rab('T000', 0);
SELECT gt_check_rab('T000', 1);
SELECT gt_check_rab('T000', 2);



-- Compares MINIMAX tree expansion.

--
-- File ../build/out/minimax_log-ffo-01-simplified-4.csv is obtained by running
-- the command:
-- $ make endgame_log_files
-- or directly calling:
-- $ ./build/bin/endgame_solver -f db/gpdb-sample-games.txt -q ffo-01-simplified-4 -s minimax -l build/out/minimax_log-ffo-01-simplified-4
--
\! ./gt_load_file.sh $REVERSI_USERNAME $REVERSI_DBNAME $REVERSI_SERVER_ADDR $REVERSI_IP_PORT ../build/out/minimax_log-ffo-01-simplified-4.csv;
SELECT gt_load_from_staging('T001','C_MINIMAX_SOLVER', 'Test data obtained by the C minimax solver on position ffo-01-simplified-4.');
VACUUM(FULL, ANALYZE) game_tree_log;
SELECT p_assert(gt_check('T001', 0) = (20040, 6879, 6879, 8875, 0, 13161, 0, 1, 6201), 'The game tree T001/0 has not been loaded as expected.');

--
-- Loads into the db the game tree generated by SQL_MINIMAX_SOLVER on position ffo-01-simplified-4.
--
SELECT
  id,
  description,
  game_position_pp(gp),
  game_position_solve(gp, 'SQL_MINIMAX_SOLVER', TRUE, 'T002', 'Test data obtained by the PL/SQL minimax solver on position ffo-01-simplified-4.')
FROM
  game_position_test_data WHERE id = 'ffo-01-simplified-4';
VACUUM(FULL, ANALYZE) game_tree_log;
SELECT p_assert(gt_check('T002', 0) = (20040, 6879, 6879, 8875, 0, 13161, 0, 1, 6201), 'The game tree T002/0 has not been loaded as expected.');

--
-- Tests if the tree expansion performed by the PLSQL and C minimax implementations are equal.
--
DO $$
DECLARE
  gt_compare_result_record RECORD;
BEGIN
  gt_compare_result_record := gt_compare('T001', 'T002');
  PERFORM p_assert(gt_compare_result_record.are_equal = TRUE, 'Game tree set T001 and T002 must be equal.');
END $$;



-- Compares ALPHA-BETA tree expansion.

--
-- File ../build/out/ab_solver_log-ffo-01-simplified-4.csv is obtained by running
-- the command:
-- $ make endgame_log_files
-- or directly calling:
-- $ ./build/bin/endgame_solver -f db/gpdb-sample-games.txt -q ffo-01-simplified-4 -s ab -l build/out/ab_solver_log-ffo-01-simplified-4
--
\! ./gt_load_file.sh $REVERSI_USERNAME $REVERSI_DBNAME $REVERSI_SERVER_ADDR $REVERSI_IP_PORT ../build/out/ab_solver_log-ffo-01-simplified-4.csv;
SELECT gt_load_from_staging('T003','C_ALPHABETA_SOLVER', 'Test data obtained by the C alpha-beta solver on position ffo-01-simplified-4.');
VACUUM(FULL, ANALYZE) game_tree_log;
SELECT p_assert(gt_check('T003', 0) = (2029, 1046, 1046, 1228, 0, 983, 0, 1, 538), 'The game tree T003/0 has not been loaded as expected.');

--
-- Loads into the db the game tree generated by SQL_ALPHABETA_SOLVER on position ffo-01-simplified-4.
--
SELECT
  id,
  description,
  game_position_pp(gp),
  game_position_solve(gp, 'SQL_ALPHABETA_SOLVER', TRUE, 'T004', 'Test data obtained by the PL/SQL alpha-beta solver on position ffo-01-simplified-4.')
FROM
  game_position_test_data WHERE id = 'ffo-01-simplified-4';
VACUUM(FULL, ANALYZE) game_tree_log;
SELECT p_assert(gt_check('T004', 0) = (2029, 1046, 1046, 1228, 0, 983, 0, 1, 538), 'The game tree T004/0 has not been loaded as expected.');

--
-- Tests if the tree expansion performed by the PLSQL and C alpha-beta implementations are equal.
--
DO $$
DECLARE
  gt_compare_result_record RECORD;
BEGIN
  gt_compare_result_record := gt_compare('T003', 'T004');
  PERFORM p_assert(gt_compare_result_record.are_equal = TRUE, 'Game tree set T003 and T004 must be equal.');
END $$;



-- Loads a sample of 100 random game trees.

--
-- File ../build/out/random_game_sampler_log-t100.csv is obtained by running
-- the command:
-- $ make endgame_log_files
-- or directly calling:
-- $ ./build/bin/endgame_solver -f db/gpdb-sample-games.txt -q initial -s rand -n 100 -l build/out/random_game_sampler_log-t100 
--
\! ./gt_load_file.sh $REVERSI_USERNAME $REVERSI_DBNAME $REVERSI_SERVER_ADDR $REVERSI_IP_PORT ../build/out/random_game_sampler_log-t100.csv;
SELECT gt_load_from_staging('T005','C_RANDOM_SAMPLER', 'Test data obtained by the C random game sampler on position initial.');
VACUUM(FULL, ANALYZE) game_tree_log;
SELECT gt_check_random('T005');

DO $$
DECLARE
  run_label_in     CHAR(4) := 'T005';
  sub_run_id_count INTEGER;
  run_id_in        INTEGER;
BEGIN
  SELECT gtlh.run_id INTO STRICT run_id_in FROM game_tree_log_header AS gtlh  WHERE gtlh.run_label = run_label_in;
  SELECT COUNT(DISTINCT sub_run_id) INTO STRICT sub_run_id_count FROM game_tree_log WHERE run_id = run_id_in;
  PERFORM p_assert(sub_run_id_count = 100, '100 games must have been loaded from random_game_sampler_log-t100.csv.');
END $$;

-- Loads the game tree generated by the es and ifes solvers.

--
-- File ../build/out/exact_solver_log-ffo-01.csv is obtained by running
-- the command:
-- $ make endgame_log_files
-- or directly calling:
-- $ ./build/bin/endgame_solver -f db/gpdb-ffo.txt -q ffo-01 -s es -l build/out/exact_solver_log-ffo-01
--
\! ./gt_load_file.sh $REVERSI_USERNAME $REVERSI_DBNAME $REVERSI_SERVER_ADDR $REVERSI_IP_PORT ../build/out/exact_solver_log-ffo-01.csv;
SELECT gt_load_from_staging('T006','C_ES_SOLVER', 'Test data obtained by the C exact solver on position FFO-01.');
VACUUM(FULL, ANALYZE) game_tree_log;
SELECT * FROM gt_check('T006', 0);

--
-- File ../build/out/ifes_solver_log-ffo-01.csv is obtained by running
-- the command:
-- $ make endgame_log_files
-- or directly calling:
-- $ ./build/bin/endgame_solver -f db/gpdb-ffo.txt -q ffo-01 -s ifes -l build/out/ifes_solver_log-ffo-01
--
\! ./gt_load_file.sh $REVERSI_USERNAME $REVERSI_DBNAME $REVERSI_SERVER_ADDR $REVERSI_IP_PORT ../build/out/ifes_solver_log-ffo-01.csv;
SELECT gt_load_from_staging('T007','C_IFES_SOLVER', 'Test data obtained by the C ifes solver on position FFO-01.');
VACUUM(FULL, ANALYZE) game_tree_log;
SELECT * FROM gt_check('T007', 0);

--
-- Tests if the tree expansion performed by the es and ifes C implementations are equal.
--
DO $$
DECLARE
  sub_run_id_in     INTEGER := 0;
  es_run_label_in   CHAR(4) := 'T006';
  ifes_run_label_in CHAR(4) := 'T007';

  ifes_rec  RECORD;
  es_rec    RECORD;
  run_id_in INTEGER;
BEGIN
  SELECT gtlh.run_id INTO STRICT run_id_in FROM game_tree_log_header AS gtlh  WHERE gtlh.run_label = ifes_run_label_in;
  SELECT
    COUNT(*)             AS leaf_count,
    COUNT(DISTINCT hash) AS distinct_leaf_count
  INTO STRICT ifes_rec
  FROM
    game_tree_log AS t0
  WHERE
    t0.run_id = run_id_in
    AND t0.is_leaf = TRUE
    AND t0.hash = (SELECT ~t1.hash FROM game_tree_log AS t1 WHERE t1.run_id = run_id_in AND t1.sub_run_id = sub_run_id_in AND t1.call_id = t0.call_id + 1);

  PERFORM p_assert(ifes_rec.leaf_count = 20244, 'Ifes game tree leaf count must be 20244.');

  SELECT gtlh.run_id INTO STRICT run_id_in FROM game_tree_log_header AS gtlh  WHERE gtlh.run_label = es_run_label_in;
  WITH leafs AS (
    SELECT
      call_id,
      call_id - 1 AS parent_call_id,
      hash,
      parent_hash
    FROM
      game_tree_log
    WHERE
      run_id = run_id_in AND sub_run_id = sub_run_id_in AND is_leaf = TRUE
  ), filtered_leafs AS (
    SELECT call_id, hash
    FROM leafs
    WHERE
      (call_id,hash) NOT IN (SELECT DISTINCT parent_call_id, parent_hash from leafs)
  ) SELECT
      COUNT(*)             AS leaf_count,
      COUNT(DISTINCT hash) AS distinct_leaf_count
    INTO STRICT es_rec
    FROM
      filtered_leafs;
    
  PERFORM p_assert(es_rec.leaf_count = 20244, 'Es game tree leaf count must be 20244.');

  PERFORM p_assert(ifes_rec.distinct_leaf_count = es_rec.distinct_leaf_count, 'Distinct hash counts must be equal.');
END $$;

--
-- Tests if the gt_mobility_statistics_on_random(character) function works properly.
--
DO $$
DECLARE
  avg_mobility NUMERIC;
BEGIN
 SELECT average_mobility INTO STRICT avg_mobility FROM gt_mobility_statistics_on_random('T005') WHERE empty_square_count = 60;
 PERFORM p_assert(avg_mobility = 4.00, 'Average mobility when there are 60 empty disc is 4.00.');
END $$;
