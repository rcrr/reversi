
  README-REGAB

  Copyright (c) 2018, 2019 Roberto Corradini. All rights reserved.

  This file is part of the reversi program
  http://github.com/rcrr/reversi

  This program is free software; you can redistribute it and/or modify it
  under the terms of the GNU General Public License as published by the
  Free Software Foundation; either version 3, or (at your option) any
  later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA
  or visit the site <http://www.gnu.org/licenses/>.

This file describes the generation of the REGAB database. It is work in progress !!!

Everithing is done on the test database.

-- 00 -- Backup the production DB on vilya, then transfer the dump file on the test machine
 $ nohup time pg_dump -d prd_regab -h localhost -p 5432 -U postgres -v -Fc -Z2 -f 201802240830-vilya-prd_regab.dump > 201802240830-vilya-prd_regab.log 2>&1&
 
-- 01 -- Backup the test DB
 $ nohup time pg_dump -d tst_regab -h localhost -p 5432 -U postgres -v -Fc -f 201802240930-hypnotic-tst_regab.dump > 201802240930-hypnotic-tst_regab.log 2>&1

-- 02 -- Prepare the empty DB
 $ sudo su - postgres
 $ psql -U postgres
 postgres=# DROP DATABASE tst_regab;
 postgres=# CREATE DATABASE tst_regab WITH OWNER tst_regab ENCODING 'UTF8' TABLESPACE tst_regab;
 postgres=# GRANT ALL PRIVILEGES ON DATABASE tst_regab TO tst_regab;

-- 03 -- Restore the database dump
 $ pg_restore --no-acl --no-owner --jobs=8 -v -d tst_regab -p 5432 -h localhost -U tst_regab 201802240830-vilya-prd_regab.dump

-- 04 -- Run database migrations
 $ psql -U tst_regab -d tst_regab -h localhost

 tst_regab=> SET search_path TO reversi;
 tst_regab=> \i 0101_up_migrations.sql;
 tst_regab=> \i 0102_up_gp_ext.sql
 tst_regab=> \i 0103_up_patterns.sql
 tst_regab=> \i 0104_up_pattern_functions.sql
 tst_regab=> \i 0107_up_pattern_data.sql

-- 05 -- Test the procedure

 $ ./build/bin/regab -h
 tst_regab=> SELECT * FROM regab_prng_gp_h;
 tst_regab=> SELECT batch_id, empty_count, status, count(1) FROM regab_prng_gp GROUP BY batch_id, empty_count, status ORDER BY batch_id, empty_count, status;
 
 $ ./build/bin/regab -v -a generate -c cfg/regab.cfg -e test -s 777 -n 7
 tst_regab=> SELECT * FROM regab_prng_gp_h;
 ### take notice of the seq of the new record just created

 ### substitute the ??? with the proper value.
 $ ./build/bin/regab -v -a solve -c cfg/regab.cfg -e test -b ??? -n 10 -y 10

 tst_regab=> SELECT empty_count, status, count(1) FROM regab_prng_gp WHERE batch_id = ??? AND empty_count < 12 GROUP BY empty_count, status ORDER BY empty_count, status;
 tst_regab=> UPDATE regab_prng_gp SET status = 'CMQ', cst_time = now() WHERE status = 'CMP' AND batch_id = ???;
 $ ./build/bin/regab -v -a offspring -c cfg/regab.cfg -e test -b ??? -y 10 -n 20

 tst_regab=> SELECT empty_count, status, count(1) FROM regab_prng_gp WHERE batch_id = ??? AND empty_count < 12 GROUP BY empty_count, status ORDER BY empty_count, status;

 ### The meaning of the two arguments TRUE, FALSE is "verbose", "simulation".
 tst_regab=> SELECT * FROM regab_gp_populate_pattern_class_table(???, 0, 20, '{CMR,CMS}', TRUE, FALSE);
     
 tst_regab=> SELECT * FROM regab_prng_gp_pattern_class;
 tst_regab=> SELECT a.empty_count AS ec, count(a.seq) AS cnt, count(b.gp_id) AS classified FROM regab_prng_gp AS a LEFT JOIN regab_prng_gp_pattern_class AS b ON a.seq = b.gp_id
               WHERE a.batch_id = ??? AND a.status IN ('CMS', 'CMR') GROUP BY a.empty_count ORDER BY a.empty_count;
     
 ### substitute the ??? with the proper value.
 tst_regab=> DELETE FROM regab_prng_gp_h WHERE seq = ???;

 ### eventually reset the sequence ...
 tst_regab=> ALTER SEQUENCE regab_prng_gp_h_seq_seq RESTART WITH ???;
