
This is a diary of the performance evolution of the endgame solver.


Date: January 28st, 2017

Having substituted the RAM to vilya (64GB - 4x16 - G.Skill Tridentz F4-3200C16-16GTZKW) the time to run:

rcrr@vilya:~/base/prj/reversi/c$ time ./build/bin/endgame_solver -f db/gpdb-ffo.txt -q ffo-42 -s es2

has decreased to: 21.875s


Date: January 22nd, 2017
      git commit 9c225b72458e49b253b6a77cfa1d8b640e5f7b93

A lot of time has passed since I wrote an entry into this diary. But running the command:

rcrr@hypnotic:~/base/prj/reversi$ git log 16936be7a2c6533c7e5f741db3f3cebf5fb12c2a..9c225b72458e49b253b6a77cfa1d8b640e5f7b93 --pretty=oneline | wc -l

returns 699 commits done in between. Several changes has been realized, where the most relevant are the PVE env,
the AVX2 game mechanics, and a complete redesign of the alpha-beta implementation.
The codebase is really a work in progress, before having a solid endgame solver, there are quite a few points
to address: PVE code is a mess, the memory allocation is far too complex, the code is not working for position 39.
The board module has too many types (GamePosition, Board, GamePositionX) and has far too duplicated functions.
Exact_solver does not have a clean implementation like alpha-beta. The code searches without iterative-deepening,
and without an hashtable.

Anyhow I just purchased a new PC, and here you find the comparison among the two:

hypnotic:
CPU:     Intel(R) Core(TM) i7-4700HQ CPU @ 2.40GHz
RAM:    
  Size:  16384 MB
  Type:  DDR3
  Speed: 1600 MHz
KERNEL:  Linux hypnotic 3.13.0-107-generic #154-Ubuntu SMP Tue Dec 20 09:57:27 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux
GCC:     4.8.4

vilya:
CPU:     Intel(R) Core(TM) i7-6700K CPU @ 4.00GHz
RAM:
  Size:  4096 MB
  Type:  DDR4
  Speed: 2133 MHz
KERNEL:  Linux vilya 4.4.0-59-generic #80-Ubuntu SMP Fri Jan 6 17:47:47 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux
GCC:     5.4.0

Position ffo-42 has been selected as the benchmark, running:

rcrr@hypnotic:~/base/prj/reversi/c$ time ./build/bin/endgame_solver -f db/gpdb-ffo.txt -q ffo-42 -s es2

on the two systems, where the result: [node_count=586695875, leaf_count=109953274] - Final outcome: best move=G2, position value=6)
is the same, the running times are:

hypnotic: 33.658s -> 17,431,097 nodes per second
vilya:    23.006s -> 25,501,864 "

giving a 32% performance improvement.


Date: July 20th, 2014
      git commit 16936be7a2c6533c7e5f741db3f3cebf5fb12c2a

Preparing tests today I have run for the first time the es solver on the FFO suite from game position 1 to 49.
Position 1-39 took 30 minutes to solve.
Position 40-49 tooks a lot more:

$ time ./build/test/bin/exact_solver_test --verbose -m=slow -p /exact_solver/game_position_solve_ffo_40_49_test
GTest: random seed: R02S332669c3e36ddf6b7599850bc9588d58
GTest: run: /exact_solver/game_position_solve_ffo_40_49_test
Test #  0: data[position=ffo-40, expected_value=+38, expected_best_moves={A2}]; result[outcome=+38, move=A2]
Test #  1: data[position=ffo-41, expected_value=+00, expected_best_moves={H4}]; result[outcome=+00, move=H4]
Test #  2: data[position=ffo-42, expected_value=+06, expected_best_moves={G2}]; result[outcome=+06, move=G2]
Test #  3: data[position=ffo-43, expected_value=-12, expected_best_moves={G3 C7}]; result[outcome=-12, move=C7]
Test #  4: data[position=ffo-44, expected_value=-14, expected_best_moves={D2 B8}]; result[outcome=-14, move=B8]
Test #  5: data[position=ffo-45, expected_value=+06, expected_best_moves={B2}]; result[outcome=+06, move=B2]
Test #  6: data[position=ffo-46, expected_value=-08, expected_best_moves={B3}]; result[outcome=-08, move=B3]
Test #  7: data[position=ffo-47, expected_value=+04, expected_best_moves={G2}]; result[outcome=+04, move=G2]
Test #  8: data[position=ffo-48, expected_value=+28, expected_best_moves={F6}]; result[outcome=+28, move=F6]
Test #  9: data[position=ffo-49, expected_value=+16, expected_best_moves={E1}]; result[outcome=+16, move=E1]
GTest: result: OK

real	588m36.881s
user	588m43.793s
sys	0m14.163s

Must be noted that under tests all the assertion are turned on.

Date: March 16th, 2014
      git commit f1623c20d944ce63e2b183700ebccc04a0e9fef2

A variant of the algorithm that traverses the game tree has been rewritten to avoid the malloc/free practice, it is the rab solver.
Rab solver will be a random alpha-beta variant that has been conceived to extimate the tree size for a given position.
But sofar it doesn't cut, and doesn't sort, so it is a real minimax.
The comparison between the malloc/free minimax, and the stack based variant states that the second is twice as fast.

Here the comparison:

rcrr@hypnotic:~/base/prj/reversi/c$ time ./build/bin/endgame_solver -f db/gpdb-sample-games.txt -q ffo-01-simplified -s minimax
Entry id:    ffo-01-simplified
Description:  From position ffo-01 executing two moves, A8 wins +18
Game Position:
    a b c d e f g h 
 1  . . @ @ @ @ @ . 
 2  . O O O @ @ . O 
 3  . O O O @ @ O O 
 4  . O @ O O O @ O 
 5  O @ @ @ O O @ O 
 6  . . @ O @ O O O 
 7  . @ @ @ O O O O 
 8  . O O O O O @ . 
Player to move: BLACK

Solving the game position ffo-01-simplified using solver minimax ...

    a b c d e f g h 
 1  . . @ @ @ @ @ . 
 2  . O O O @ @ . O 
 3  . O O O @ @ O O 
 4  . O @ O O O @ O 
 5  O @ @ @ O O @ O 
 6  . . @ O @ O O O 
 7  . @ @ @ O O O O 
 8  . O O O O O @ . 
Player to move: BLACK

[node_count=18055194, leaf_count=5316151]
Final SearchNode sn: move=A8, value=18

real	0m4.755s
user	0m4.758s
sys	0m0.000s
rcrr@hypnotic:~/base/prj/reversi/c$ time ./build/bin/endgame_solver -f db/gpdb-sample-games.txt -q ffo-01-simplified -s rab
Entry id:    ffo-01-simplified
Description:  From position ffo-01 executing two moves, A8 wins +18
Game Position:
    a b c d e f g h 
 1  . . @ @ @ @ @ . 
 2  . O O O @ @ . O 
 3  . O O O @ @ O O 
 4  . O @ O O O @ O 
 5  O @ @ @ O O @ O 
 6  . . @ O @ O O O 
 7  . @ @ @ O O O O 
 8  . O O O O O @ . 
Player to move: BLACK

Solving the game position ffo-01-simplified using solver rab ...

    a b c d e f g h 
 1  . . @ @ @ @ @ . 
 2  . O O O @ @ . O 
 3  . O O O @ @ O O 
 4  . O @ O O O @ O 
 5  O @ @ @ O O @ O 
 6  . . @ O @ O O O 
 7  . @ @ @ O O O O 
 8  . O O O O O @ . 
Player to move: BLACK

[node_count=18213276, leaf_count=5316151]
Final SearchNode sn: move=A8, value=18

real	0m2.234s
user	0m2.236s
sys	0m0.000s



Date: February 5th, 2014
      git commit ...

A test running the minimax algorithm:

Estimated number of nodes: 4.93E+008 (variance: 7.15E+008)
Number of nodes: 1.35E+009

So the computed and the estimated are very close.
      
rcrr@hypnotic:~/base/prj/reversi/c$ time ./build/bin/endgame_solver -s minimax -f db/gpdb-ffo.txt -q ffo-01
Entry id:    ffo-01
Description:  G8:+18. H1:+12. H7:+6. A2:+6. A3:+4. B1:-4. A4:-22. G2:-24.
Game Position:
    a b c d e f g h 
 1  . . @ @ @ @ @ . 
 2  . O O O @ @ . O 
 3  . O O O @ @ O @ 
 4  . O @ O @ O @ @ 
 5  O @ @ @ O @ @ @ 
 6  . . @ O @ O @ @ 
 7  . @ @ @ O O O . 
 8  . O O O O O . . 
Player to move: BLACK

Solving the game position ffo-01 using solver minimax ...

    a b c d e f g h 
 1  . . @ @ @ @ @ . 
 2  . O O O @ @ . O 
 3  . O O O @ @ O @ 
 4  . O @ O @ O @ @ 
 5  O @ @ @ O @ @ @ 
 6  . . @ O @ O @ @ 
 7  . @ @ @ O O O . 
 8  . O O O O O . . 
Player to move: BLACK

[node_count=1345278883, leaf_count=404474235]
Final SearchNode sn: move=G8, value=18

real	23m52.960s
user	23m53.964s
sys	0m0.000s
rcrr@hypnotic:~/base/prj/reversi/c$ 


Date: January 21st, 2014
      git commit 5c97f746285d703b23b87df33c6b4f00bf77fdef

Finally after a long journey I was able to spot the reason why the two solver (es and ifes) were generating
different game tree expansions. Ifes was not ordering moves having the same mobility using the best_to_wore static
heuristic. This has been fixed, and now the two endgame solver behawe the same when ifes is forced to use
fastest first only feature.

During the investigation the analysis has been done using also SQL scripts, backed up by a PostgreSQL database,
that load and trasform the records logged by the program. This evolution is promising becouse it helped a lot
in understanding the properties of the game tree/DAG.
Scripts are a bit row, and should be organized, commentend, and cleaned.

Now I am interested in working in two different directions:

 - Tune the runner (same path, how fast is the game tree walker)
 - Measure the path length (the number of nodes being explored) given by different features

 In order to start I want to have some statistical data on the branching factor per level.

I start studying game position FFO_05, that is the only one that completes using pure MINIMAX algorithm,
without any alpha-beta cut; here the results:

rcrr@hypnotic:~/base/prj/reversi/c$ time ./build/bin/endgame_solver -f db/gpdb-ffo.txt -q ffo-05 -s es
Entry id:    ffo-05
Description:  G8:+32. G2:+12. B2:-20. G6:-26. G1:-32. G7:-34.
Game Position:
    a b c d e f g h 
 1  . O O O O O . . 
 2  . . O @ @ O . @ 
 3  @ @ O @ O @ @ . 
 4  @ @ O @ O @ @ O 
 5  @ @ O O @ O O O 
 6  @ @ @ @ O O . O 
 7  @ . @ O O O . . 
 8  . @ @ @ @ @ . . 
Player to move: BLACK

Solving the game position ffo-05 using solver es ...

    a b c d e f g h 
 1  . O O O O O . . 
 2  . . O @ @ O . @ 
 3  @ @ O @ O @ @ . 
 4  @ @ O @ O @ @ O 
 5  @ @ O O @ O O O 
 6  @ @ @ @ O O . O 
 7  @ . @ O O O . . 
 8  . @ @ @ @ @ . . 
Player to move: BLACK

[node_count=99924329, leaf_count=27616057]
Final SearchNode sn: move=G8, value=32

real	17m42.050s
user	17m29.166s
sys	0m7.825s


Date: Dicember 14th, 2013
      git commit de231cd9599955a08822a1ba662eb42f0674fa05

Several minor changes introduced, nothing really big.
The tree expanded by exact_solver (es) is not equal to the one expanded by improved_fast_endgame_solver (ifes).
Ifes is my refactoring of the endgame_solver obtained by Gunnar. The two should be equal, I have spent quite a lot of time
in logging info from the tree expansion in order to compare and understand, but I have to start over fresh now, after a month
of stop and no real understanding.

In the meanwhile I changed my PC, "whitewater" (Acer Aspire having an Intel T8300 CPU, running Ubunto 12.10 x86-64) has been
replaced by "hypnotic", a brand new ASUS n550jv, sporting a new Intel Haswell i7-4700HQ.
Running the command:
   time ./build/bin/endgame_solver -f db/gpdb-ffo.txt -q ffo-01 -s es
is 42% faster on hypnotic then on whitewater, respectively 43 vs 78 seconds.



Date: September 1st, 2013
      git commit 2ec7d4e4f0de90eec863bc56c932c9ca34584779

Endgame solver has been inserted as an option of endgame_solver under the name ifes (improved_fast_endgame_solver).
Fully analyzed the search policy used by the ifes solver. See comments in the source file.
The main part of the navigation is driven by the fastest_first heuristic, that order moves based on minimizing next level opponent mobility.
The logic has been ported to es (endgame_solver), the NPS has dropped from 2.4 millions to 1, but the number of nodes traversed has been reduced
by an order of magnitude, leading to a x3 overall speed improvement. Great! But still far from ifes.
Next step is dedicated to optimizing the sorting step.

New kpi (September 1st) are:

DATE             PROGRAM        PROBLEM  NODES             LEAFS            TIME         NPS         Notes
Sept 1, 2013     exact_solver   FFO_40        60,352,793       13,502,501       60.723     993,903   First version on FASTEST_FIRST move ordering heuristic


Date: August 9th, 2013
      git commit e9fb4e105c4d1468e0270de53026260e93f53ced

Two major flows has been identified.

 - The node count for the endgame program is plain wrong. A new one is under preparation. The nodes are a lot more!
   leaf_count gives a so small number that it is not credible. Further investigation is needed.
 - The new alpha-beta implementation introduced on August 7th, introduced a bug. Instead of setting the first_node value to
   achievable, it set to -65, so negating a very large amount of cutoff.
   Reintroduced the right value and introducing the optimization for the moves loop brought to a small improvement compared
   with the version of August 5th.

Anyhow the static move ordering doesn't bring any improvement, moreover it introduce a penalty for the FFO_40 test case.

New kpi (August 9th) are:

DATE             PROGRAM        PROBLEM  NODES             LEAFS            TIME         NPS         Notes
August 9, 2013   exact_solver   FFO_40       460,529,747      113,304,014      190.325   2,419,702   Instead of cycling on 64 moves it uses LS1B
August 7, 2013   exact_solver   FFO_40    32,907,329,685    9,350,008,623   14,588.462   2,255,709   Using static ordering for moves (and the described bug!)
August 2, 2013   exact_solver   FFO_40       460,529,747      113,304,014      212.916   2,162,964   None



Date: August 7th, 2013
      git commit 64897c444ba69a3ea8435c1ec8aefc26d3512efb

Introduced static ordering as follow:

static const uint64 legal_moves_priority_mask[] = {
  /* D4, E4, E5, D5 */                 0x0000001818000000,
  /* A1, H1, H8, A8 */                 0x8100000000000081,
  /* C1, F1, F8, C8, A3, H3, H6, A6 */ 0x2400810000810024,
  /* C3, F3, F6, C6 */                 0x0000240000240000,
  /* D1, E1, E8, D8, A4, H4, H5, A5 */ 0x1800008181000018,
  /* D3, E3, E6, D6, C4, F4, F5, C5 */ 0x0000182424180000,
  /* D2, E2, E7, D7, B4, G4, G5, B5 */ 0x0018004242001800,
  /* C2, F2, F7, C7, B3, G3, G6, B6 */ 0x0024420000422400,
  /* B1, G1, G8, B8, A2, H2, H7, A7 */ 0x4281000000008142,
  /* B2, G2, G7, B7 */                 0x0042000000004200
};

Results are very bad. NPS is almost constant at 2.2M node/sec, but the number of nodes investigated is 60 times larger!

DATE             PROGRAM        PROBLEM  NODES             LEAFS            TIME         NPS         Notes
August 7, 2013   exact_solver   FFO_40    32,907,329,685    9,350,008,623   14,588.462   2,255,709   Using static ordering for moves

A2, the first move in the sequence is tryed at the end. Static ordering do not work when the corner is already taken.



Date: August 5th, 2013
      git commit 11e21a29653628d092996119be98fa8bf8f9eee3
The binary endgame_solver is working fine. It is able to solve position #40, #41, and #42 of the FFO collection.

All the tests ar run with:
CCFLAGS = -std=c99 -pedantic -Wall -g -O4 -DG_DISABLE_ASSERT `pkg-config --cflags glib-2.0` -D_POSIX_SOURCE

DATE             PROGRAM        PROBLEM  NODES             LEAFS            TIME         NPS         Notes
August 2, 2013   exact_solver   FFO_40       460,529,747      113,304,014      212.916   2,162,964   None
August 4, 2013   exact_solver   FFO_41   187,815,478,658   49,079,945,579   89,323.340   2,102,647   None
August 4, 2013   exact_solver   FFO_42    31,360,241,470    8,255,548,073   14,885.600   2,106,750   None

We can notice that the NPS (speed) is constant at 2.1M node/sec (on my PC, whitewater, a Gnu/Linux UBUNTU 12.10
kernel 3.5.0 running on an Intel(R) Core(TM)2 Duo CPU T8300 @ 2.40GHz, having 4GByte of RAM clocked at 800MHz).

Here we see the report obtained by gprof when running the position FFO_40:

Each sample counts as 0.01 seconds.
  %   cumulative   self                self     total           
 time   seconds   seconds     calls    s/call   s/call  name    
 50.17     77.11    77.11 622057109      0.00     0.00  board_legal_moves
 20.19    108.14    31.04 412306398      0.00     0.00  game_position_make_move
 19.80    138.58    30.44         1     30.44   150.52  game_position_solve_impl
  3.75    144.34     5.76 3298451184     0.00     0.00  bit_works_signed_left_shift
  0.89    145.70     1.36                               bit_works_bitscan_MS1B_to_base8
  0.84    146.99     1.29 573833775      0.00     0.00  game_position_free
  0.81    148.23     1.24 161527362      0.00     0.00  game_position_pass
  0.64    149.22     0.99 113304014      0.00     0.00  game_position_count_difference
  0.54    150.05     0.83 226608028      0.00     0.00  bit_works_popcount
  0.53    150.86     0.81 161527362      0.00     0.00  game_position_has_any_legal_move
  0.46    151.57     0.71                               game_position_is_move_legal
  0.36    152.13     0.56 299002385      0.00     0.00  bit_works_bitscanLS1B_64
  0.30    152.59     0.46 460529747      0.00     0.00  game_position_legal_moves
  0.29    153.03     0.44        14      0.03     0.03  game_position_new
  0.21    153.35     0.32                               board_is_move_legal
  0.14    153.56     0.21                               bit_works_bitscanMS1B_8
  0.07    153.67     0.11                               advanced_square_set_is_empty
  0.06    153.76     0.09         1      0.09     0.09  game_position_print
  0.00    153.76     0.00     34992      0.00     0.00  bit_works_fill_in_between
  0.00    153.76     0.00     17496      0.00     0.00  bit_works_highest_bit_set_8
  0.00    153.76     0.00     17496      0.00     0.00  bit_works_lowest_bit_set_8
  0.00    153.76     0.00        14      0.00     0.00  board_new
  0.00    153.76     0.00         2      0.00     0.00  board_print
  0.00    153.76     0.00         1      0.00     0.00  game_position_clone

half of the time is spent by the board_legal_moves, and another 20% is eaten by the make move process.

Comparing the performances of the actual implementation with scrzebra:

DATE             PROGRAM        PROBLEM  NODES             LEAFS            TIME         NPS         Notes
July 26, 2013    scrzebra       FFO_40        19,153,313   N/A                   1.906  13,855,257   Precompiled
August 4, 2013   scrzebra       FFO_41        21,055,628   N/A                   1.700  12,109,781   *
August 4, 2013   scrzebra       FFO_42        28,573,109   N/A                   2.000  14,244,696   *

We can observe that the NPS speed is six time greather, and even most important, that the number of nodes visited is far smaller.
The number of nodes is related to the ability of the alpha-beta algorithm to "cut" more. The sorting of the moves is very efficient,
and it is the major area of improvement where to spend my effort.

Comparing the performances with another solver, taken from the Andersson Gunnar's site (http://www.radagast.se/othello/),
and compiled on my environment give these result:

DATE             PROGRAM        PROBLEM  NODES             LEAFS            TIME         NPS         Notes
July  26, 2013   endgame        FFO_40           858,417          475,315       11.857      72,397   None
August 4, 2013   endgame        FFO_41         7,550,222	4,784,508       83.716      90,189   *
August 4, 2013   endgame        FFO_42         5,471,816        2,999,282       69.344      78,908   *

Here we see that overall it is not as efficient as scrzebra, but the number of nodes visited is amazingly low!

Again, the legal moves ordering is the first step of this jurney. Let's begin from a static ordering.


