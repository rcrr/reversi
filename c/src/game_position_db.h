/**
 * @file
 *
 * @brief Game Position Database module definitions.
 * @details This module defines the #gpdb_dictionary_t, and #gpdb_entry_t entities,
 * and the errors entities arising from parsing a database source file, like
 * #gpdb_syntax_err_log_t, #gpdb_syntax_err_t and #gpdb_syntax_err_type_t.
 * This header also defines all the function prototypes that operate on them.
 *
 * @par game_position_db.h
 * <tt>
 * This file is part of the reversi program
 * http://github.com/rcrr/reversi
 * </tt>
 * @author Roberto Corradini mailto:rob_corradini@yahoo.it
 * @copyright 2013, 2014, 2017 Roberto Corradini. All rights reserved.
 *
 * @par License
 * <tt>
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the
 * Free Software Foundation; either version 3, or (at your option) any
 * later version.
 * \n
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 * \n
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA
 * or visit the site <http://www.gnu.org/licenses/>.
 * </tt>
 */

#ifndef GAME_POSITION_DB2_H
#define GAME_POSITION_DB2_H

#include "red_black_tree.h"
#include "linked_list.h"
#include "board.h"



/**
 * @brief An `Entry` collects the #GamePositionX data with a description and an unique key.
 *
 * @details Fields must be kept private, the #gpdb_entry_free function frees them all.
 */
typedef struct {
  char *id;              /**< @brief It is a string used as key in the dictionary. */
  char *description;     /**< @brief A description of this entry. */
  GamePositionX gpx;     /**< @brief The game position for this entry. */
} gpdb_entry_t;

/**
 * @brief A database of #gpdb_entry_t.
 *
 * @details Entries are organized in a dictionary having has key the id field of each entry.
 * Duplicated keys are not allowed. Trying to insert a key already loaded generates
 * an error added to the log.
 *
 * Fields must be kept private, the #gpdb_entry_free() function frees them all.
 */
typedef struct {
  rbt_table_t *table;    /**< @brief The underlaying tree structure. */
  char *description;     /**< @brief The description of the datatbase. */
} gpdb_dictionary_t;

/**
 * @enum gpdb_syntax_err_type_t
 * @brief The classification of errors that can be found parsing a database entry record.
 */
typedef enum {
  GPDB_SYNTAX_ERR_INCOMPLETE_ENTRY,        /**< @brief Error on field count. */
  GPDB_SYNTAX_ERR_BOARD_SIZE_IS_NOT_64,    /**< @brief Error on the size of the board field. */
  GPDB_SYNTAX_ERR_SQUARE_CHAR_IS_INVALID,  /**< @brief Error on the board field, one square char is out of range. */
  GPDB_SYNTAX_ERR_PLAYER_IS_NOT_ONE_CHAR,  /**< @brief Error on player field, it must be composed by one char. */
  GPDB_SYNTAX_ERR_PLAYER_CHAR_IS_INVALID,  /**< @brief Error on player field, it must be either b or w. */
  GPDB_SYNTAX_ERR_DUPLICATE_ENTRY_KEY,     /**< @brief Duplicate key error. */
  GPDB_SYNTAX_ERR_COUNT                    /**< @brief Syntax error type cardinality. */
} gpdb_syntax_err_type_t;

/**
 * @brief A syntax error in processing entries in a game position database.
 */
typedef struct {
  char *file_name;                         /**< @brief A string describing the input stream that is the source of he error. */
  size_t line_number;                      /**< @brief The line number in the input stream that generated the error. */
  char *line;                              /**< @brief A string holding the incorrect line. */
  gpdb_syntax_err_type_t type;             /**< @brief The type of the error. */
  char *message;                           /**< @brief A detailed error message. */
} gpdb_syntax_err_t;

/**
 * @brief The log of syntax error generated by parsing a database file.
 */
typedef struct {
  llist_t *list;                           /**< @brief The list of errors. */
} gpdb_syntax_err_log_t;



/*********************************************************/
/* Function prototypes for the gpdb_dictionary_t entity. */
/*********************************************************/

extern gpdb_dictionary_t *
gpdb_dictionary_new (const char *const description);

extern void
gpdb_dictionary_free (gpdb_dictionary_t *db);

extern char *
gpdb_dictionary_get_description (const gpdb_dictionary_t *const db);

extern void
gpdb_dictionary_set_description (gpdb_dictionary_t *const db,
                                 const char *const description);

extern gpdb_entry_t *
gpdb_dictionary_add_or_replace_entry (gpdb_dictionary_t *const db,
                                      gpdb_entry_t *entry);

extern size_t
gpdb_dictionary_entry_count (const gpdb_dictionary_t *const db);

extern gpdb_entry_t *
gpdb_dictionary_delete_entry (gpdb_dictionary_t *const db,
                              const gpdb_entry_t *const entry);

extern gpdb_entry_t *
gpdb_dictionary_find_entry (gpdb_dictionary_t *const db,
                            const char *const id);

extern size_t
gpdb_dictionary_load (gpdb_dictionary_t *const db,
                      gpdb_syntax_err_log_t *const elog,
                      const char *const file_name,
                      const bool duplicates_are_errors,
                      const bool replace_duplicates,
                      const bool stop_on_error);

extern void
gpdb_dictionary_print (const gpdb_dictionary_t *const db,
                       FILE *const stream,
                       const bool verbose);

extern void
gpdb_dictionary_print_summary (const gpdb_dictionary_t *const db,
                               const gpdb_syntax_err_log_t *const elog,
                               FILE *const stream);



/****************************************************/
/* Function prototypes for the gpdb_entry_t entity. */
/****************************************************/

extern gpdb_entry_t *
gpdb_entry_new (const char *const id,
                const char *const description,
                const GamePositionX *const gpx);

extern void
gpdb_entry_free (gpdb_entry_t *entry);

extern char *
gpdb_entry_get_id (gpdb_entry_t *const entry);

extern char *
gpdb_entry_get_description (gpdb_entry_t *const entry);

extern GamePositionX *
gpdb_entry_get_gpx (gpdb_entry_t *const entry);

extern void
gpdb_entry_print (const gpdb_entry_t *const entry,
                  FILE *const stream,
                  const bool verbose);



/*********************************************************/
/* Function prototypes for the gpdb_syntax_err_t entity. */
/*********************************************************/

extern gpdb_syntax_err_t *
gpdb_syntax_err_new (const char *const file_name,
                     const size_t line_number,
                     const char *const line,
                     const gpdb_syntax_err_type_t type,
                     const char *const message);

extern void
gpdb_syntax_err_free (gpdb_syntax_err_t *error);

extern char *
gpdb_syntax_err_get_file_name (gpdb_syntax_err_t *const error);

extern size_t
gpdb_syntax_err_get_line_number (gpdb_syntax_err_t *const error);

extern char *
gpdb_syntax_err_get_line (gpdb_syntax_err_t *const error);

extern gpdb_syntax_err_type_t
gpdb_syntax_err_get_type (gpdb_syntax_err_t *const error);

extern char *
gpdb_syntax_err_get_message (gpdb_syntax_err_t *const error);

extern void
gpdb_syntax_err_print (const gpdb_syntax_err_t *const error,
                       FILE *const stream);



/******************************************************************/
/* Function prototypes for the gpdb_syntax_err_log_t entity. */
/******************************************************************/

extern gpdb_syntax_err_log_t *
gpdb_syntax_err_log_new (void);

extern void
gpdb_syntax_err_log_free (gpdb_syntax_err_log_t *log);

extern void
gpdb_syntax_err_log_add (gpdb_syntax_err_log_t *log,
                         gpdb_syntax_err_t *err);

extern size_t
gpdb_syntax_err_log_length (const gpdb_syntax_err_log_t *const log);

extern void
gpdb_syntax_err_log_print (const gpdb_syntax_err_log_t *const log,
                           FILE *const stream);

extern llist_t *
gpdb_syntax_err_log_get_list (gpdb_syntax_err_log_t *const log);



#endif /* GAME_POSITION_DB2_H */
