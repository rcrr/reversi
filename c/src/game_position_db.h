/**
 * @file
 *
 * @brief GamePositionDb module definitions.
 * @details This module defines the #GamePositionDb, and #GamePositionDbEntry entities,
 * and the errors entities arising from parsing a database source file, like
 * #GamePositionDbSyntaxErrorLog, #GamePositionDbEntrySyntaxError and #GamePositionDbEntrySyntaxErrorType.
 * This header also defines all the function prototypes that operate on them.
 *
 * @par game_position_db.h
 * <tt>
 * This file is part of the reversi program
 * http://github.com/rcrr/reversi
 * </tt>
 * @author Roberto Corradini mailto:rob_corradini@yahoo.it
 * @copyright 2013, 2014 Roberto Corradini. All rights reserved.
 *
 * @par License
 * <tt>
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the
 * Free Software Foundation; either version 3, or (at your option) any
 * later version.
 * \n
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 * \n
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA
 * or visit the site <http://www.gnu.org/licenses/>.
 * </tt>
 */

#ifndef GAME_POSITION_DB_H
#define GAME_POSITION_DB_H

#include <glib.h>

#include "board.h"

/**
 * @typedef GamePositionDbSyntaxErrorLog
 * @brief The log of syntax error generated by parsing a database file.
 * It contains a list of #GamePositionDbEntrySyntaxError entities.
 */
typedef GSList GamePositionDbSyntaxErrorLog;

/**
 * @enum GamePositionDbEntrySyntaxErrorType
 * @brief The classification of errors thta can be found parsing a database entry record.
 */
typedef enum {
  GPDB_ENTRY_SYNTAX_ERROR_ON_ID,                   /**< Error on parsing the id field. */
  GPDB_ENTRY_SYNTAX_ERROR_BOARD_SIZE_IS_NOT_64,    /**< Error on the size of the board field. */
  GPDB_ENTRY_SYNTAX_ERROR_SQUARE_CHAR_IS_INVALID,  /**< Error on the board field, one square char is out of range. */
  GPDB_ENTRY_SYNTAX_ERROR_BOARD_FIELD_IS_INVALID,  /**< Error on parsing the board field. */
  GPDB_ENTRY_SYNTAX_ERROR_PLAYER_IS_NOT_ONE_CHAR,  /**< Error on player field, it must be composed by one char. */
  GPDB_ENTRY_SYNTAX_ERROR_PLAYER_CHAR_IS_INVALID,  /**< Error on player field, it must be either b or w. */
  GPDB_ENTRY_SYNTAX_ERROR_PLAYER_FIELD_IS_INVALID, /**< Error on parsing the player field. */
  GPDB_ENTRY_SYNTAX_ERROR_DESC_FIELD_IS_INVALID,   /**< Error on parsing the description field. */
  GPDB_ENTRY_SYNTAX_ERROR_DUPLICATE_ENTRY_KEY      /**< Duplicate key error. */
} GamePositionDbEntrySyntaxErrorType;

/**
 * @brief A syntax error in processing entries in a game position database.
 *
 * @details Fields must be kept private, the #gpdb_entry_syntax_error_free function frees them all.
 */
typedef struct {
  GamePositionDbEntrySyntaxErrorType  error_type;      /**< @brief The type of the error. */
  gchar                              *source;          /**< @brief A string describing the input stream that is the source of he error. */
  int                                 line_number;     /**< @brief The line number in the input stream that generated the error. */
  gchar                              *line;            /**< @brief A string holding the incorrect line. */
  gchar                              *error_message;   /**< @brief A detailed error message. */
} GamePositionDbEntrySyntaxError;

/**
 * @brief An `Entry` collects the #GamePositionX data with a description and an unique key.
 *
 * @details Fields must be kept private, the #gpdb_entry_free function frees them all.
 */
typedef struct {
  char          *id;                /**< @brief It is a string used as key in the dictionary. */
  GamePositionX *gpx;               /**< @brief The game position for this entry. */
  char          *desc;              /**< @brief A description of this entry. */
} GamePositionDbEntry;

/**
 * @brief A database of #GamePositionDbEntry.
 *
 * @details Entries are organized in a dictionary having has key the id field of each entry.
 * Duplicated keys are not allowed. Trying to insert a key already loaded generates
 * an error added to the log.
 *
 * Fields must be kept private, the #gpdb_free function frees them all.
 */
typedef struct {
  GTree  *tree;     /**< @brief The underlaying tree structure. */
  gchar  *desc;     /**< @brief The description of the datatbase. */
} GamePositionDb;



/**********************************************************************/
/* Function prototypes for the GamePositionDbEntrySyntaxError entity. */
/**********************************************************************/

extern GamePositionDbEntrySyntaxError *
gpdb_entry_syntax_error_new (GamePositionDbEntrySyntaxErrorType  error_type,
                             char *source,
                             int line_number,
                             char *line,
                             char *error_message);

extern void
gpdb_entry_syntax_error_free (GamePositionDbEntrySyntaxError *syntax_error);

extern gchar *
gpdb_entry_syntax_error_print (const GamePositionDbEntrySyntaxError const *syntax_error);



/********************************************************************/
/* Function prototypes for the GamePositionDbSyntaxErrorLog entity. */
/********************************************************************/

extern GamePositionDbSyntaxErrorLog *
gpdb_syntax_error_log_new (void);

extern void
gpdb_syntax_error_log_free (GamePositionDbSyntaxErrorLog *syntax_error_log);

extern gchar *
gpdb_syntax_error_log_print (GamePositionDbSyntaxErrorLog *syntax_error_log);

extern int
gpdb_syntax_error_log_length (GamePositionDbSyntaxErrorLog *syntax_error_log);



/******************************************************/
/* Function prototypes for the GamePositionDb entity. */
/******************************************************/

extern int
gpdb_load (FILE *fp,
           gchar *source,
           GamePositionDb *db,
           GamePositionDbSyntaxErrorLog **p_syntax_error_log,
           GError **p_e);

extern GamePositionDb *
gpdb_new (char *desc);

extern void
gpdb_free (GamePositionDb *db,
           gboolean free_segment);

extern GamePositionDbEntry *
gpdb_lookup (GamePositionDb *db,
             gchar *entry_id);

extern GamePositionX *
gpdb_get_gpx (GamePositionDbEntry *entry);

extern gchar *
gpdb_print (GamePositionDb *db);

extern gchar *
gpdb_print_summary (GamePositionDb *db);

extern int
gpdb_length (GamePositionDb *db);

/***********************************************************/
/* Function prototypes for the GamePositionDbEntry entity. */
/***********************************************************/

extern GamePositionDbEntry *
gpdb_entry_new (void);

extern void
gpdb_entry_free (GamePositionDbEntry *entry,
                 gboolean free_segment);

extern gchar *
gpdb_entry_print (GamePositionDbEntry *entry);


#endif /* GAME_POSITION_DB_H */
