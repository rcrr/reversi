/**
 * @file
 *
 * @brief Solved and classified game position module definitions.
 * @details This module defines tables and records read and written to binary files.
 *
 * @par rglm_data_files.h
 * <tt>
 * This file is part of the reversi program
 * http://github.com/rcrr/reversi
 * </tt>
 * @author Roberto Corradini mailto:rob_corradini@yahoo.it
 * @copyright 2018 Roberto Corradini. All rights reserved.
 *
 * @par License
 * <tt>
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the
 * Free Software Foundation; either version 3, or (at your option) any
 * later version.
 * \n
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 * \n
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA
 * or visit the site <http://www.gnu.org/licenses/>.
 * </tt>
 */

#ifndef RGLM_DATA_FILES_H
#define RGLM_DATA_FILES_H

/*
 * Structures used to write and read binary files relay on "fixed" size fields, this is to make the code
 * more robust in case of an architectural change. Saved files should be readable also by different
 * hardware and software platforms.
 */

/**
 * @brief Reversi GLM data file record definition for the position summary table.
 *
 * @details Each record is identified by the `batch_id` and the `status` as defined
 * in the REGAB data base in table `regab_prng_gp`.
 *
 * The field `game_position_cnt` is the count of game positions being available in the
 * REGAB database that are matching the criteria `(batch_id, status)`.
 * The field `classified_cnt` is the count of solved and classified game positions stored
 * in the file and categorized by `batch_id` and `status`.
 * The two count could differ when records in table `regab_prng_gp` do not have a relative
 * one into table `regab_prng_gp_pattern_class` (it means that the game position is not classified).
 *
 * The record has a fized size and needs 24 bytes.
 */
typedef struct rglmdf_position_summary_record_s {
  int32_t batch_id;            /**< @brief Key field, maps the batch_id::regab_prng_gp field in the REGAB database. */
  char status[4];              /**< @brief Key field, maps the status::regab_prng_gp field in the REGAB database. */
  int64_t game_position_cnt;   /**< @brief Count of game position matching the key values in the regab_prng_gp table. */
  int64_t classified_cnt;      /**< @brief Count of classified game position in table regab_prng_pattern_class referenced by the selection. */
} rglmdf_position_summary_record_t;

/**
 * @brief Reversi GLM data file table holding the summary of game positions.
 *
 * @details The table contains the count of game positions grouped by batch_is and status.
 */
typedef struct rglmdf_position_summary_table_s {
  uint64_t ntuples;                            /**< @brief Number of records. */
  rglmdf_position_summary_record_t *records;   /**< @brief Records of the table. */
} rglmdf_position_summary_table_t;

/**
 * @brief Reversi GLM data file record definition for the pattern frequency summary table.
 *
 * @details Each record is identified by the `glm_variable_id`.
 *
 * The table has a unique key on the two fields  `pattern_id` and `principal_index_value`, each record
 * is a bi-directional map between `glm_variable_id` and the fields `(pattern_id, principal_index_value)`.
 *
 * The set of records is generated by a group by operation on the REGAB database table `regab_prng_gp_pattern_class`
 * on the records matching the selection criteria.
 *
 * The group by operation executes three sums collecting the aggregated data stored into the fields `total_cnt`,
 * `relative_frequency`, `theoretical_probability`.
 *
 * The record has a fized size and needs 40 bytes.
 */
typedef struct rglmdf_pattern_freq_summary_record_s {
  int64_t glm_variable_id;         /**< @brief It is the unique variable index for the GLM (Generalized Linear Model). */
  int32_t pattern_id;              /**< @brief Board Pattern Id, as defined by REGAB table regab_prng_patterns. */
  int32_t principal_index_value;   /**< @brief Principal Index Value for Pattern as defined by REGAB table regab_prng_pattern_ranges. */
  int64_t total_cnt;               /**< @brief Number of times that the pattern, or its mirror, is found  in the game position selection. */
  double relative_frequency;       /**< @brief Relative frequency of the pattern in the data. */
  double theoretical_probability;  /**< @brief Expected probability. */
} rglmdf_pattern_freq_summary_record_t;

/**
 * @brief Reversi GLM data file table holding the summary of pattern frequencies.
 *
 * @details The table contains the count of pattern occurrencies grouped by (pattern_id, principal_index_value).
 */
typedef struct rglmdf_pattern_freq_summary_table_s {
  uint64_t ntuples;                                /**< @brief Number of records. */
  rglmdf_pattern_freq_summary_record_t *records;   /**< @brief Records of the table. */
} rglmdf_pattern_freq_summary_table_t;

/**
 * @brief Reversi GLM data file record definition for the solved and classified game position table.
 *
 * @details Each record is identified by either the `row_n` counter or the `gp_id` field.
 *
 * NEEDS MORE EXPLANATION ....
 */
typedef struct rglmdf_solved_and_classified_gp_record_s {
  int64_t row_n;       /**< @brief Row number. */
  int64_t gp_id;       /**< @brief Game Position Id, as defined by REGAB table regab_prng_gp. */
  int64_t mover;       /**< @brief Game position board definition for mover. */
  int64_t opponent;    /**< @brief Game position board definition for opponent. */
  int8_t game_value;   /**< @brief Game value for the position. */
  uint32_t *ivalues;   /**< @brief Array of pattern index values, or glm variables. */
} rglmdf_solved_and_classified_gp_record_t;

/**
 * @brief Reversi GLM data file table holding the game positons being solved and classified.
 *
 * @details The table contains the count of pattern occurrencies grouped by (pattern_id, principal_index_value).
 */
typedef struct rglmdf_solved_and_classified_gp_table_s {
  uint64_t ntuples;                                    /**< @brief Number of records. */
  rglmdf_solved_and_classified_gp_record_t *records;   /**< @brief Records of the table. */
} rglmdf_solved_and_classified_gp_table_t;

typedef struct rglmdf_general_data_s {
  time_t file_creation_time;
  // ... more ... more ... more
  // ...
} rglmdf_general_data_t;

#endif /* RGLM_DATA_FILES_H */
