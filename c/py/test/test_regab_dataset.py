#
# test_regab_dataset.py
#
# This file is part of the reversi program
# http://github.com/rcrr/reversi
# 
# Aauthor Roberto Corradini mailto:rob_corradini@yahoo.it
# Copyright 2022 Roberto Corradini. All rights reserved.
#
# License
# 
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 3, or (at your option) any
# later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA
# or visit the site <http://www.gnu.org/licenses/>.
#

import unittest

import reversi
import reversi.board
import reversi.pattern
import reversi.regab

from reversi.board import *
from reversi.pattern import *
from reversi.regab import *

import numpy as np
import pandas as pd

import io


def aux_get_test_data() -> pd.DataFrame:
    data_as_string = \
        """
        I;    ROW_N;      GP_ID;                MOVER;             OPPONENT; GAME_VALUE; GAME_VALUE_TRANSFORMED; EVALUATION_FUNCTION;         RESIDUAL;           F_000;  I0_000;  I0_001;  I0_002;  I0_003;  I0_004;  I0_005;  I0_006;  I0_007;  I0_008;  I0_009;  I0_010;  I0_011;  I0_012;  I0_013;  I0_014;  I0_015;  I0_016;  I0_017;  I0_018;  I0_019;  I0_020;  I0_021;  I0_022;  I0_023;  I0_024;  I0_025;  I0_026;  I0_027;  I0_028;  I0_029;  I0_030;  I0_031;  I0_032;  I0_033;  I0_034;  I0_035;  I0_036;  I0_037;  I0_038;  I0_039;  I0_040;  I0_041;  I0_042;  I0_043;  I0_044;  I0_045;  I0_046;  I0_047;  I0_048;  I0_049;  I0_050;  I0_051;  I0_052;  I0_053;  I1_000;  I1_001;  I1_002;  I1_003;  I1_004;  I1_005;  I1_006;  I1_007;  I1_008;  I1_009;  I1_010;  I1_011;  I1_012;  I1_013;  I1_014;  I1_015;  I1_016;  I1_017;  I1_018;  I1_019;  I1_020;  I1_021;  I1_022;  I1_023;  I1_024;  I1_025;  I1_026;  I1_027;  I1_028;  I1_029;  I1_030;  I1_031;  I1_032;  I1_033;  I1_034;  I1_035;  I1_036;  I1_037;  I1_038;  I1_039;  I1_040;  I1_041;  I1_042;  I1_043;  I1_044;  I1_045;  I1_046;  I1_047;  I1_048;  I1_049;  I1_050;  I1_051;  I1_052;  I1_053;  I2_000;  I2_001;  I2_002;  I2_003;  I2_004;  I2_005;  I2_006;  I2_007;  I2_008;  I2_009;  I2_010;  I2_011;  I2_012;  I2_013;  I2_014;  I2_015;  I2_016;  I2_017;  I2_018;  I2_019;  I2_020;  I2_021;  I2_022;  I2_023;  I2_024;  I2_025;  I2_026;  I2_027;  I2_028;  I2_029;  I2_030;  I2_031;  I2_032;  I2_033;  I2_034;  I2_035;  I2_036;  I2_037;  I2_038;  I2_039;  I2_040;  I2_041;  I2_042;  I2_043;  I2_044;  I2_045;  I2_046;  I2_047;  I2_048;  I2_049;  I2_050;  I2_051;  I2_052;  I2_053
        0;        0;   61412414;  4039748727574502410;   327827004853592689;         20;         0.653124988079;      0.500000000000;  -0.153124988079;       +0.550000;    2138;    2169;     603;    4374;   15719;   12699;   14643;   19197;   15260;    2169;     603;   43740;     609;     200;     677;    3897;    3369;    2879;    1424;    1457;    5499;    3290;     701;    3400;      39;      71;      29;      16;     207;     202;     134;      25;     612;     696;     697;      76;    2181;    1660;     687;     468;     396;     647;   30083;   48825;   46530;    2187;   30777;   33045;   37305;    3890;       6;      11;      11;       2;    2138;     483;     369;       2;   15719;    9987;   13875;   15813;   15260;     483;     369;   13124;     609;     200;     677;     259;    1363;    2879;    1424;    1457;     689;    3290;     701;    3400;      13;      71;      29;      16;      23;     122;     134;      25;      68;     152;     395;      76;     485;    1100;     375;     156;     396;     647;   30083;   48825;   46530;    2187;   30777;   33045;   37305;    3890;       6;      11;      11;       2;     880;     355;     295;       3;    2339;    1753;    2139;    2363;    3915;    2885;    2876;    3441;    5641;    5355;    5692;    5399;    7350;    7731;    7386;    7411;    8232;    8694;    8242;    8731;    8936;    8967;    8949;    8939;    8992;    9065;    9072;    8994;    9155;    9220;    9338;    9163;    9635;    9760;    9578;    9478;    9947;   10021;   12264;   13814;   13658;   10421;   12390;   12665;   12960;   10471;   15284;   15288;   15288;   15280
        1;        1;   61412475;   559243195252217873;  4043152765932733956;         18;         0.637812495232;      0.500000000000;  -0.137812495232;       +0.600000;     100;    1107;    3393;    2701;   19621;       0;   16164;   12259;   13222;   20790;   29637;   48628;     132;    1026;    1435;    2128;     161;    4995;    1912;    6469;    6441;    6196;    2791;    1349;      24;      55;      58;      53;     133;     138;     236;      17;     144;     311;     447;     728;     132;    1104;    1422;     603;     121;    1348;   32176;   13257;   53694;   44740;   26271;   42483;   57820;   19054;      26;       0;      22;       4;     100;     201;     715;    2287;   19621;       0;   14916;   11515;   13222;    6762;   26959;   35092;     132;     174;    1435;    2128;     161;     209;    1912;    4103;    1835;    3284;    2557;    1349;      24;      29;      38;      53;     133;      34;     188;      17;      48;     311;     205;     728;     132;     688;     214;     123;     121;    1348;   32176;   13257;   53694;   44740;   26271;   42483;   57820;   19054;      26;       0;      14;       4;      91;     175;     483;     918;    2777;    1141;    2233;    1903;    3511;    3066;    4128;    4611;    5305;    5339;    6077;    6381;    6857;    6869;    7540;    7924;    8496;    8691;    8617;    8393;    8945;    8949;    8954;    8962;    9071;    9002;    9092;    8986;    9138;    9302;    9252;    9401;    9458;    9696;    9504;    9449;    9865;   10145;   12534;   10947;   14334;   13532;   11730;   13388;   14890;   11310;   15295;   15278;   15290;   15282
        2;        2;   61412536;  2170859095647584513;    39980606536228362;         34;         0.760312497616;      0.500000000000;  -0.260312497616;       +0.450000;      61;    1575;    1080;    3483;   19636;   13617;    9045;    5778;   13183;    1575;   40446;   55971;     241;     396;    2117;    6559;    4373;    1152;    1659;    2086;    3877;    2589;    2074;    6532;      79;      45;      40;      25;      78;     161;      94;     142;     231;     105;     457;     720;     240;    1943;    1410;    1335;     681;     403;   58624;   37296;   42147;   58644;   52650;   48228;   19074;   58855;       8;       9;       0;       7;      61;     357;     120;      49;   18220;   13617;    8997;    5034;   13183;     357;   13242;   52537;     241;     396;    2117;    4373;    4373;     552;    1113;    2086;    3877;    2143;    2074;    4292;      53;       7;      40;      25;      78;     161;      94;     142;     213;     105;     457;      80;     240;    1943;     538;     367;     681;     403;   58624;   37296;   42147;   58644;   52650;   48228;   19074;   58855;       8;       1;       0;       7;      60;     284;     108;      49;    2715;    2086;    1565;    1303;    3490;    2872;    3519;    4894;    5392;    5502;    6376;    6709;    7959;    7029;    7251;    7596;    8784;    8569;    8550;    8835;    8962;    8931;    8955;    8946;    9038;    9084;    9048;    9075;    9258;    9183;    9359;    9167;    9525;    9853;    9647;    9571;   10023;    9953;   15105;   12959;   13363;   15113;   14243;   13770;   11313;   15184;   15286;   15279;   15278;   15285
        3;        3;   61412598; -9162304220659974144;  4549209723535900160;         28;         0.714375019073;      0.500000000000;  -0.214375019073;       +0.500000;       0;    3276;    6553;      83;   13770;    4383;   10090;    8723;   13122;   22959;   52480;   52571;     726;    1080;    1588;    1592;    2421;    6270;    1903;    2171;    3316;    5478;    1345;    2156;      19;      33;      76;      20;      75;     114;     202;     122;     237;     375;     616;     158;     726;    1185;    1656;     204;     125;    3318;   58320;   26361;   31825;   32645;   56862;   29281;   27944;   27729;       6;       9;      22;       8;       0;     364;    2915;      83;   13770;    1215;   10090;    8723;   13122;    6925;   35720;   52571;     726;     120;    1588;    1592;     703;    1610;    1903;    2171;    3316;    2066;    1345;    2156;      19;      19;      44;      20;      51;      58;     122;     122;     159;     229;     392;     158;     726;     697;     128;     204;     125;    2146;   58320;   26361;   31825;   32645;   56862;   29281;   27944;   27729;       6;       1;      14;       8;       1;     290;     991;      77;    2110;    1191;    1792;    1559;    3439;    3123;    4685;    4906;    5734;    5295;    6151;    6155;    7113;    7439;    7534;    7635;    8706;    8545;    8389;    8578;    8941;    8941;    8958;    8942;    9017;    9022;    9065;    9065;    9226;    9268;    9336;    9225;    9722;    9702;    9454;    9494;    9867;   10264;   14987;   11737;   12491;   12613;   14719;   12040;   11863;   11826;   15284;   15279;   15290;   15286
        4;        4;   61412659;   179854128020199460;   576745111792378376;          8;         0.561249971390;      0.500000000000;  -0.061249971390;       +0.500000;     306;     465;     891;     546;    6003;    5757;    9801;    2787;   52794;   33270;   27135;   46473;    6432;    1104;    5466;    2182;    1655;    1087;    1579;    2325;    5577;    1209;    6548;    5576;      60;      78;      14;      77;      35;     194;     203;      57;     366;     373;     120;     714;     728;     387;    1124;     633;    1677;    1194;   27765;   32298;   29322;   57894;   32733;   29385;   29703;   58500;      17;       7;       4;       3;     306;     465;      57;     546;    1395;    5085;    9081;    2787;   52794;   33270;   26301;   34443;    1592;    1104;    1094;    2182;    1655;    1087;    1579;     919;    1931;    1209;    5588;    5576;      20;      26;      14;      71;      35;     194;     203;      33;     202;     373;     120;     134;     728;     147;    1124;     393;     951;    1194;   27765;   32298;   29322;   57894;   32733;   29385;   29703;   58500;      17;       7;       4;       3;     254;     343;      56;     400;    1196;    1310;    1585;    1255;    4977;    4390;    4004;    4545;    6155;    5925;    5916;    6412;    7448;    7232;    7424;    7176;    8528;    8370;    8901;    8898;    8942;    8947;    8937;    8967;    9003;    9093;    9095;    9001;    9249;    9327;    9194;    9207;    9724;    9469;    9770;    9590;   10075;   10125;   11831;   12566;   12050;   14909;   12639;   12067;   12178;   15062;   15292;   15285;   15282;   15281
        """
    header =  pd.read_csv(io.StringIO(data_as_string), sep=';', nrows=0).rename(columns=lambda x: x.strip())
    data = pd.read_csv(io.StringIO(data_as_string), sep=';', header=0, names=header.columns, index_col=0)
    return data


class TestRegabExtractFile(unittest.TestCase):

    def test_compute_indexes_on_df(self):
        data = aux_get_test_data()
        computed = compute_indexes_on_df(data[['MOVER', 'OPPONENT']], patterns_as_list)
        for col_name in computed.columns:
            is_equal = all(data[col_name] - computed[col_name] == 0)
            self.assertEqual(True, is_equal)

    def test_regab_extract_999_positions_all_patterns(self):

        filepath = './py/test/data/regab_extract_999_positions_all_patterns.P.csv'
        header =  pd.read_csv(filepath, sep=';', nrows=0).rename(columns=lambda x: x.strip())
        data = pd.read_csv(filepath, sep=';', header=0, names=header.columns, index_col=0)

        # The file has 999 game position records (empty_count = 20, batch_id = 4, status = CMS).
        # One fearure has been extracted: mobility - F_000
        # All available patterns have been extracted, see the list below with the mapping to the column names.
        # I0_??? columns have the index values
        # I1_??? columns have the principal index values
        # I2_??? columns have the rglm variable reference
        #
        #  Feature id:  1 [  MOBILITY][     1][F_000:F_000]
        #  Pattern id:  0     [  EDGE][  1140][I_000:I_003]
        #  Pattern id:  1     [CORNER][  1648][I_004:I_007]
        #  Pattern id:  2     [ XEDGE][  2421][I_008:I_011]
        #  Pattern id:  3     [    R2][  1610][I_012:I_015]
        #  Pattern id:  4     [    R3][  1242][I_016:I_019]
        #  Pattern id:  5     [    R4][   862][I_020:I_023]
        #  Pattern id:  6     [ DIAG4][    45][I_024:I_027]
        #  Pattern id:  7     [ DIAG5][   133][I_028:I_031]
        #  Pattern id:  8     [ DIAG6][   300][I_032:I_035]
        #  Pattern id:  9     [ DIAG7][   459][I_036:I_039]
        #  Pattern id: 10     [ DIAG8][   517][I_040:I_041]
        #  Pattern id: 11     [2X5COR][  4900][I_042:I_049]
        #  Pattern id: 12     [ DIAG3][    18][I_050:I_053]
        #
        #
        # $ head regab_extract_999_positions_all_patterns.P.csv 
        #       I;    ROW_N;      GP_ID;                MOVER;             OPPONENT; GAME_VALUE; GAME_VALUE_TRANSFORMED; EVALUATION_FUNCTION;         RESIDUAL;           F_000;  I0_000;  I0_001;  I0_002;  I0_003;  I0_004;  I0_005;  I0_006;  I0_007;  I0_008;  I0_009;  I0_010;  I0_011;  I0_012;  I0_013;  I0_014;  I0_015;  I0_016;  I0_017;  I0_018;  I0_019;  I0_020;  I0_021;  I0_022;  I0_023;  I0_024;  I0_025;  I0_026;  I0_027;  I0_028;  I0_029;  I0_030;  I0_031;  I0_032;  I0_033;  I0_034;  I0_035;  I0_036;  I0_037;  I0_038;  I0_039;  I0_040;  I0_041;  I0_042;  I0_043;  I0_044;  I0_045;  I0_046;  I0_047;  I0_048;  I0_049;  I0_050;  I0_051;  I0_052;  I0_053;  I1_000;  I1_001;  I1_002;  I1_003;  I1_004;  I1_005;  I1_006;  I1_007;  I1_008;  I1_009;  I1_010;  I1_011;  I1_012;  I1_013;  I1_014;  I1_015;  I1_016;  I1_017;  I1_018;  I1_019;  I1_020;  I1_021;  I1_022;  I1_023;  I1_024;  I1_025;  I1_026;  I1_027;  I1_028;  I1_029;  I1_030;  I1_031;  I1_032;  I1_033;  I1_034;  I1_035;  I1_036;  I1_037;  I1_038;  I1_039;  I1_040;  I1_041;  I1_042;  I1_043;  I1_044;  I1_045;  I1_046;  I1_047;  I1_048;  I1_049;  I1_050;  I1_051;  I1_052;  I1_053;  I2_000;  I2_001;  I2_002;  I2_003;  I2_004;  I2_005;  I2_006;  I2_007;  I2_008;  I2_009;  I2_010;  I2_011;  I2_012;  I2_013;  I2_014;  I2_015;  I2_016;  I2_017;  I2_018;  I2_019;  I2_020;  I2_021;  I2_022;  I2_023;  I2_024;  I2_025;  I2_026;  I2_027;  I2_028;  I2_029;  I2_030;  I2_031;  I2_032;  I2_033;  I2_034;  I2_035;  I2_036;  I2_037;  I2_038;  I2_039;  I2_040;  I2_041;  I2_042;  I2_043;  I2_044;  I2_045;  I2_046;  I2_047;  I2_048;  I2_049;  I2_050;  I2_051;  I2_052;  I2_053
        #       0;        0;   61412414;  4039748727574502410;   327827004853592689;         20;         0.653124988079;      0.500000000000;  -0.153124988079;       +0.550000;    2138;    2169;     603;    4374;   15719;   12699;   14643;   19197;   15260;    2169;     603;   43740;     609;     200;     677;    3897;    3369;    2879;    1424;    1457;    5499;    3290;     701;    3400;      39;      71;      29;      16;     207;     202;     134;      25;     612;     696;     697;      76;    2181;    1660;     687;     468;     396;     647;   30083;   48825;   46530;    2187;   30777;   33045;   37305;    3890;       6;      11;      11;       2;    2138;     483;     369;       2;   15719;    9987;   13875;   15813;   15260;     483;     369;   13124;     609;     200;     677;     259;    1363;    2879;    1424;    1457;     689;    3290;     701;    3400;      13;      71;      29;      16;      23;     122;     134;      25;      68;     152;     395;      76;     485;    1100;     375;     156;     396;     647;   30083;   48825;   46530;    2187;   30777;   33045;   37305;    3890;       6;      11;      11;       2;     880;     355;     295;       3;    2339;    1753;    2139;    2363;    3915;    2885;    2876;    3441;    5641;    5355;    5692;    5399;    7350;    7731;    7386;    7411;    8232;    8694;    8242;    8731;    8936;    8967;    8949;    8939;    8992;    9065;    9072;    8994;    9155;    9220;    9338;    9163;    9635;    9760;    9578;    9478;    9947;   10021;   12264;   13814;   13658;   10421;   12390;   12665;   12960;   10471;   15284;   15288;   15288;   15280
        #       1;        1;   61412475;   559243195252217873;  4043152765932733956;         18;         0.637812495232;      0.500000000000;  -0.137812495232;       +0.600000;     100;    1107;    3393;    2701;   19621;       0;   16164;   12259;   13222;   20790;   29637;   48628;     132;    1026;    1435;    2128;     161;    4995;    1912;    6469;    6441;    6196;    2791;    1349;      24;      55;      58;      53;     133;     138;     236;      17;     144;     311;     447;     728;     132;    1104;    1422;     603;     121;    1348;   32176;   13257;   53694;   44740;   26271;   42483;   57820;   19054;      26;       0;      22;       4;     100;     201;     715;    2287;   19621;       0;   14916;   11515;   13222;    6762;   26959;   35092;     132;     174;    1435;    2128;     161;     209;    1912;    4103;    1835;    3284;    2557;    1349;      24;      29;      38;      53;     133;      34;     188;      17;      48;     311;     205;     728;     132;     688;     214;     123;     121;    1348;   32176;   13257;   53694;   44740;   26271;   42483;   57820;   19054;      26;       0;      14;       4;      91;     175;     483;     918;    2777;    1141;    2233;    1903;    3511;    3066;    4128;    4611;    5305;    5339;    6077;    6381;    6857;    6869;    7540;    7924;    8496;    8691;    8617;    8393;    8945;    8949;    8954;    8962;    9071;    9002;    9092;    8986;    9138;    9302;    9252;    9401;    9458;    9696;    9504;    9449;    9865;   10145;   12534;   10947;   14334;   13532;   11730;   13388;   14890;   11310;   15295;   15278;   15290;   15282
        #       2;        2;   61412536;  2170859095647584513;    39980606536228362;         34;         0.760312497616;      0.500000000000;  -0.260312497616;       +0.450000;      61;    1575;    1080;    3483;   19636;   13617;    9045;    5778;   13183;    1575;   40446;   55971;     241;     396;    2117;    6559;    4373;    1152;    1659;    2086;    3877;    2589;    2074;    6532;      79;      45;      40;      25;      78;     161;      94;     142;     231;     105;     457;     720;     240;    1943;    1410;    1335;     681;     403;   58624;   37296;   42147;   58644;   52650;   48228;   19074;   58855;       8;       9;       0;       7;      61;     357;     120;      49;   18220;   13617;    8997;    5034;   13183;     357;   13242;   52537;     241;     396;    2117;    4373;    4373;     552;    1113;    2086;    3877;    2143;    2074;    4292;      53;       7;      40;      25;      78;     161;      94;     142;     213;     105;     457;      80;     240;    1943;     538;     367;     681;     403;   58624;   37296;   42147;   58644;   52650;   48228;   19074;   58855;       8;       1;       0;       7;      60;     284;     108;      49;    2715;    2086;    1565;    1303;    3490;    2872;    3519;    4894;    5392;    5502;    6376;    6709;    7959;    7029;    7251;    7596;    8784;    8569;    8550;    8835;    8962;    8931;    8955;    8946;    9038;    9084;    9048;    9075;    9258;    9183;    9359;    9167;    9525;    9853;    9647;    9571;   10023;    9953;   15105;   12959;   13363;   15113;   14243;   13770;   11313;   15184;   15286;   15279;   15278;   15285
        #       3;        3;   61412598; -9162304220659974144;  4549209723535900160;         28;         0.714375019073;      0.500000000000;  -0.214375019073;       +0.500000;       0;    3276;    6553;      83;   13770;    4383;   10090;    8723;   13122;   22959;   52480;   52571;     726;    1080;    1588;    1592;    2421;    6270;    1903;    2171;    3316;    5478;    1345;    2156;      19;      33;      76;      20;      75;     114;     202;     122;     237;     375;     616;     158;     726;    1185;    1656;     204;     125;    3318;   58320;   26361;   31825;   32645;   56862;   29281;   27944;   27729;       6;       9;      22;       8;       0;     364;    2915;      83;   13770;    1215;   10090;    8723;   13122;    6925;   35720;   52571;     726;     120;    1588;    1592;     703;    1610;    1903;    2171;    3316;    2066;    1345;    2156;      19;      19;      44;      20;      51;      58;     122;     122;     159;     229;     392;     158;     726;     697;     128;     204;     125;    2146;   58320;   26361;   31825;   32645;   56862;   29281;   27944;   27729;       6;       1;      14;       8;       1;     290;     991;      77;    2110;    1191;    1792;    1559;    3439;    3123;    4685;    4906;    5734;    5295;    6151;    6155;    7113;    7439;    7534;    7635;    8706;    8545;    8389;    8578;    8941;    8941;    8958;    8942;    9017;    9022;    9065;    9065;    9226;    9268;    9336;    9225;    9722;    9702;    9454;    9494;    9867;   10264;   14987;   11737;   12491;   12613;   14719;   12040;   11863;   11826;   15284;   15279;   15290;   15286
        #       4;        4;   61412659;   179854128020199460;   576745111792378376;          8;         0.561249971390;      0.500000000000;  -0.061249971390;       +0.500000;     306;     465;     891;     546;    6003;    5757;    9801;    2787;   52794;   33270;   27135;   46473;    6432;    1104;    5466;    2182;    1655;    1087;    1579;    2325;    5577;    1209;    6548;    5576;      60;      78;      14;      77;      35;     194;     203;      57;     366;     373;     120;     714;     728;     387;    1124;     633;    1677;    1194;   27765;   32298;   29322;   57894;   32733;   29385;   29703;   58500;      17;       7;       4;       3;     306;     465;      57;     546;    1395;    5085;    9081;    2787;   52794;   33270;   26301;   34443;    1592;    1104;    1094;    2182;    1655;    1087;    1579;     919;    1931;    1209;    5588;    5576;      20;      26;      14;      71;      35;     194;     203;      33;     202;     373;     120;     134;     728;     147;    1124;     393;     951;    1194;   27765;   32298;   29322;   57894;   32733;   29385;   29703;   58500;      17;       7;       4;       3;     254;     343;      56;     400;    1196;    1310;    1585;    1255;    4977;    4390;    4004;    4545;    6155;    5925;    5916;    6412;    7448;    7232;    7424;    7176;    8528;    8370;    8901;    8898;    8942;    8947;    8937;    8967;    9003;    9093;    9095;    9001;    9249;    9327;    9194;    9207;    9724;    9469;    9770;    9590;   10075;   10125;   11831;   12566;   12050;   14909;   12639;   12067;   12178;   15062;   15292;   15285;   15282;   15281
        #       5;        5;   61412720;     3872956107194368;  9092834787143444480;          8;         0.561249971390;      0.500000000000;  -0.061249971390;       +0.650000;       0;     294;    2184;     588;   18954;   18168;   16548;   17085;   39366;   13416;    2184;     588;    6372;    4749;    2583;     524;    6560;    6477;    5827;     617;    3520;    6525;    1119;    2075;       7;      51;      75;      14;      72;      45;     238;     131;      68;     402;     635;     539;     688;     369;    1943;     620;    2070;     693;   13122;   32127;   37419;    9336;   45684;   29007;   48597;   24102;       2;      24;      19;      20;       0;     294;    2184;     588;   13626;   18168;   16548;   17061;   13122;   13416;    2184;     588;     188;    2063;     685;     524;    6560;    2159;    3641;     617;    2560;     647;    1119;    2075;       7;      25;      17;      14;      24;      21;     134;     131;      68;     238;     617;     539;     688;     201;    1943;     620;     618;     639;   13122;   32127;   37419;    9336;   45684;   29007;   48597;   24102;       2;       8;      11;      20;       1;     244;     895;     427;    2090;    2687;    2480;    2570;    3439;    3606;    2945;    2901;    5347;    6349;    5698;    5582;    8061;    7628;    7875;    7063;    8618;    8224;    8327;    8551;    8931;    8946;    8940;    8937;    8993;    8990;    9072;    9070;    9155;    9274;    9391;    9380;    9696;    9491;    9853;    9675;   10002;   10013;   10943;   12520;   12976;   10694;   13605;   11975;   13803;   11589;   15280;   15286;   15288;   15293
        #       6;        6;   61412781;      158931088583748;   208973663040099081;         12;         0.591875016689;      0.500000000000;  -0.091875016689;       +0.750000;     794;    1806;    1458;    5913;   11405;   16008;   18927;   17712;   53282;   54294;   53946;   58401;    6281;    2185;    1970;    2033;    6468;    2181;     700;    3291;    2173;     474;     403;    5796;      70;      21;      25;       6;      39;     161;      24;      99;     225;     472;      53;     126;    1116;    2181;    2186;    2067;    2157;    2177;   50123;   58668;    6318;   21708;   37101;   58362;    5838;   12428;      15;      24;       7;       6;     794;    1806;       6;      35;   10133;   16008;   18159;   13776;   53282;   54294;   52494;   52523;    6227;    2185;    1970;    2033;    1916;    1455;     700;    2065;    2173;     474;     403;     644;      50;      15;      25;       6;      39;     161;      24;      19;      51;     376;      53;      66;     148;     485;    2186;     611;    2103;    2177;   50123;   58668;    6318;   21708;   37101;   58362;    5838;   12428;       7;       8;       7;       6;     526;     824;       7;      36;    1804;    2426;    2682;    2114;    5038;    5117;    4871;    4886;    6810;    6415;    6310;    6335;    7544;    7409;    7111;    7583;    8584;    8175;    8146;    8221;    8960;    8938;    8946;    8930;    9006;    9084;    8993;    8988;    9141;    9329;    9143;    9153;    9470;    9635;    9860;    9668;   10261;   10277;   14022;   15121;   10559;   11454;   12935;   15005;   10532;   10898;   15285;   15286;   15285;   15284
        #       7;        7;   61412842;   581000068700018495;  1172095905200343040;         24;         0.683749973774;      0.500000000000;  -0.183749973774;       +0.550000;     364;      30;     135;    3285;    9841;   14097;    6723;   18000;    6925;   39396;   13257;   22968;    2335;    1575;     519;    3204;    1363;     370;    6543;    3318;    3304;    5710;    3522;    4339;      40;      37;      54;      52;     145;      49;     121;     128;     392;     124;      66;     318;     159;     130;     688;    1098;     612;    1849;   36085;   28461;    8154;   11061;   46287;   27783;   24246;   22963;      13;       1;       6;      18;     364;      30;     135;     607;    9841;   14097;    6723;   18000;    6925;   13932;   13257;    7168;    2335;     357;     519;     580;    1363;     370;     485;    2146;    2632;    3290;    1102;    2833;      40;      31;       2;      52;      97;      49;     121;     128;     392;     124;      66;     154;     159;     130;     688;     202;     612;    1849;   36085;   28461;    8154;   11061;   46287;   27783;   24246;   22963;      13;       1;       6;       2;     290;      31;     120;     438;    1724;    2149;    1332;    2642;    3123;    3760;    3526;    3195;    6434;    5468;    5579;    5622;    7350;    6931;    7010;    7620;    8631;    8694;    8316;    8657;    8955;    8950;    8926;    8961;    9050;    9015;    9064;    9068;    9336;    9198;    9153;    9221;    9481;    9456;    9696;    9492;    9998;   10219;   12872;   11902;   10641;   10851;   13646;   11834;   11607;   11529;   15289;   15279;   15284;   15280
        #       8;        8;   61412903;    18261080671256329;  1201357896619655216;         14;         0.607187509537;      0.500000000000;  -0.107187509537;       +0.550000;     676;    1875;      54;    3186;    9829;   16860;   10098;   17496;   26920;   28119;    6615;   22869;    3280;    1110;     671;    1080;    2794;    1913;     553;    1212;    1911;    5009;    3533;    3273;      39;       5;      77;      33;     202;     238;      12;      53;     615;     363;     241;     378;     369;    1929;     523;    1185;    1422;    1093;   29593;   33708;   45009;   26271;   29556;   48912;   17658;   29254;       4;      14;       4;       0;     676;    1041;      54;      94;    9085;   14220;   10098;   13608;   26920;   27285;    6615;    6655;    3280;     930;     671;     120;    2794;    1913;     553;    1212;    1365;    5009;    3533;    1579;      13;       5;      71;      19;     122;     134;      12;      53;     149;     121;     241;      22;     201;     401;     523;     697;     642;    1093;   29593;   33708;   45009;   26271;   29556;   48912;   17658;   29254;       4;      14;       4;       0;     461;     601;      53;      86;    1588;    2164;    1795;    2084;    4122;    4154;    2990;    3020;    6577;    5833;    5687;    5295;    7708;    7541;    7030;    7307;    8400;    8872;    8742;    8444;    8936;    8929;    8967;    8941;    9065;    9072;    8981;    9019;    9217;    9195;    9277;    9115;    9491;    9597;    9638;    9702;   10016;   10087;   12149;   12702;   13550;   11730;   12133;   13836;   11193;   12027;   15282;   15290;   15282;   15278


        self.assertEqual(999, len(data))

        pattern_coltab = {
            'EDGE':   ( 0,  3),
            'CORNER': ( 4,  7),
            'XEDGE':  ( 8, 11),
            'R2':     (12, 15),
            'R3':     (16, 19),
            'R4':     (20, 23),
            'DIAG4':  (24, 27),
            'DIAG5':  (28, 31),
            'DIAG6':  (32, 35),
            'DIAG7':  (36, 39),
            'DIAG8':  (40, 41),
            '2X5COR': (42, 49),
            'DIAG3':  (50, 53),
        }

        basic_col_names = ['ROW_N', 'GP_ID', 'MOVER', 'OPPONENT', 'GAME_VALUE', 'F_000']

        self.assertEqual(True, set(basic_col_names).issubset(set(data.columns)))

        for pattern_name in pattern_coltab.keys():
            pattern = patterns_as_dict[pattern_name]
            self.assertIsNotNone(pattern)
            (idx_start, idx_end) = pattern_coltab[pattern_name]
            pattern_index_col_names = [f'I0_{x:03d}' for x in range(idx_start, idx_end + 1)]
            pattern_principal_col_names = [f'I1_{x:03d}' for x in range(idx_start, idx_end + 1)]
            pattern_col_names = pattern_index_col_names + pattern_principal_col_names
            # print('Pattern name: {:6s} , columns: {} ; {}'.format(pattern_name, pattern_index_col_names, pattern_principal_col_names))
            
            data_pattern = data[basic_col_names + pattern_col_names]
            # print(data_pattern)
            
            def compute_indexes(row):
                m = row['MOVER']
                o = row['OPPONENT']
                b = Board(SquareSet.new_from_signed_int(m), SquareSet.new_from_signed_int(o))
                ret = np.concatenate(b.compute_pattern_principal_indexes(pattern))
                return ret

            computed_indexes = data_pattern[['MOVER', 'OPPONENT']].apply(compute_indexes, axis=1)
            data_computed = pd.DataFrame(list(computed_indexes), columns=pattern_col_names).astype(np.uint16)
            # print(data_computed)

            for col_name in pattern_col_names:
                is_equal = all(data_pattern[col_name] - data_computed[col_name] == 0)
                # print('pattern {:6s} column {:6s} is correct: {}'.format(pattern_name, col_name, is_equal))
                self.assertEqual(True, is_equal)
