
  README-BLIS-FLAME

  Copyright (c) 2020 Roberto Corradini. All rights reserved.

  This file is part of the reversi program
  http://github.com/rcrr/reversi

  This program is free software; you can redistribute it and/or modify it
  under the terms of the GNU General Public License as published by the
  Free Software Foundation; either version 3, or (at your option) any
  later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA
  or visit the site <http://www.gnu.org/licenses/>.



This file describes the configuration and settings required to download , build , and install
the librieries:

    BLIS        ( https://github.com/flame/blis )
    libFLAME    ( https://github.com/flame/libflame )

from which some parts of the REVERSI program depends.



BLIS
_________

BLIS is a portable software framework for instantiating high-performance BLAS-like dense linear algebra libraries.
The framework was designed to isolate essential kernels of computation that, when optimized,
immediately enable optimized implementations of most of its commonly used and computationally intensive operations.
BLIS is written in ISO C99 and available under a new/modified/3-clause BSD license. While BLIS exports a new BLAS-like API,
it also includes a BLAS compatibility layer which gives application developers access to BLIS implementations via
traditional BLAS routine calls. An object-based API unique to BLIS is also available.

API documentation can be found at:

  https://github.com/flame/blis/blob/master/docs/BLISTypedAPI.md
  https://github.com/flame/blis/blob/master/docs/BLISObjectAPI.md


Portions of BLIS project's code are copyrighted by

  The University of Texas at Austin

while other portions are copyrighted by

  Hewlett Packard Enterprise Development LP
  Advanced Micro Devices, Inc.

All parties provide their portions of the code under the "3-clause" BSD license.



libFLAME
_________

libflame is a portable library for dense matrix computations, providing much of the functionality present in LAPACK,
developed by current and former members of the Science of High-Performance Computing (SHPC) group in the Institute for
Computational Engineering and Sciences at The University of Texas at Austin.
libflame includes a compatibility layer, lapack2flame, which includes a complete LAPACK implementation.

API documentation can be found at:

  https://github.com/flame/libflame/blob/master/docs/libflame/libflame.pdf


The libFLAME  project's code is copyrighted by

  The University of Texas at Austin

libFLAME is available as free software under the "3-clause" BSD license.



###
### Download , Build , Configure , Make , Test , Install steps ... 
###

##
## ##########
##
## BLIS
##
## ##########
##

#
# The BLIS project and build procedure is documented at:
#
# https://github.com/flame/blis/wiki
#

#
# Download/clone the source code at a convinient local directory. 
#

$ git clone https://github.com/flame/blis.git blis

$ cd blis

#
# Follow instructions in:
# https://github.com/flame/blis/blob/master/docs/BuildSystem.md
#
# My current PCs acheron and vilya ( Intel Skylake Architecture, without AVX512 extensions ) needs
# the "haswell" architecture.
# I have also tested on different servers the "skx" architecture ( Intel SkylakeX with AVX512 extensions ).
# and AMD Epyc 7002 servers , that works well with the "haswell" architecture ( basically AVX2 design ).
#
# The OpenMP libraries have to be installed. Anyway are also required by other Reversi subcomponents.
#

$ ./configure --help

$ ./configure --enable-cblas --enable-threading=openmp haswell
$ make
$ make check

#
# The files:
#
#   lib/haswell/libblis.a
#   lib/haswell/libblis.so
#   lib/haswell/libblis.so.2
#
#   include/haswell/blis.h
#
# are generated by the make procedure.
#



#
# Tests
#

#
# Follow the documentation found at:
#
# https://github.com/flame/blis/blob/master/docs/Testsuite.md
#

$ cd testsuite
$ make
$ ./test_libblis.x

$ cd ..

$ cd blastest
$ make
$ make run
$ ./check-blastest.sh

$ cd ..



#
# To remove and clean everything, in case of a new configure/build process:
#

$ make clean
$ make cleanmk
$ make distclean
$ make uninstall



#
# Install BLIS for Reversi
#
# To install the library and the header files, and make them available to the Reversi
# project, copy them to their specific appropriate directories, where the $REVERSI_HOME
# is the home directory of the Reversi installation.
#

$ cp lib/haswell/libblis.a $REVERSI_HOME/c/ext/lib/.
$ cp include/haswell/blis.h $REVERSI_HOME/c/ext/include/.



#
# Compiling with BLIS
#
# The Reversi Makefile expects to find the static library in the c/ext/lib directory
# and the header file in c/ext/include
#
# C source files calling BLIS or BLAS functions need to include the "blis.h" header as here described.
#

#include "stdio.h"
#include "stdlib.h"
#include "otherstuff.h"
#include "blis.h"



#
# In case the BLAS prototypes are not required or even wanted, it is possible to disable them.
#

#include "stdio.h"
#include "stdlib.h"
#include "otherstuff.h"
#define BLIS_DISABLE_BLAS_DEFS    // disable BLAS prototypes within BLIS.
#include "blis.h"




##
## ##########
##
## libFLAME
##
## ##########
##


#
# The libFLAME project and build procedure is documented at:
#
# https://github.com/flame/libflame
#
# https://www.cs.utexas.edu/~flame/web/libFLAME.html
#

$ git clone https://github.com/flame/libflame.git libflame

$ cd libflame

$ ./configure --help

$ ./configure --enable-max-arg-list-hack --enable-lapack2flame --enable-debug --enable-multithreading=openmp --enable-supermatrix --enable-memory-alignment=64 --enable-ldim-alignment

$ make

# Or in parallel ...
$ make -j4

#
# ... ... ... at the end of the make process we have the libflame library object
# being created , as confirmed by the line :
#
#   Archiving lib/x86_64-unknown-linux-gnu/libflame.a
#
# The new library is located at:
#   lib/x86_64-unknown-linux-gnu/libflame.a
#
# While the include file is located at:
#   ./include/x86_64-unknown-linux-gnu/FLAME.h
#

#
# In order to query that a symbol is properly provided by the library we can use the nm command.
# Globally defined symbol in the text (code) segment are categorized by the T letter.
#
# To query for the LAPACK function dpotrf_ ( conversion from fortran to C ):
#

$ nm -A lib/x86_64-unknown-linux-gnu/libflame.a | grep "T dpotrf_$"
lib/x86_64-unknown-linux-gnu/libflame.a:FLA_potrf.o:0000000000000140 T dpotrf_



#
# Installation in /usr/local ( optional ).
#

#
# In case we would like to install it and make it available "system wide" we have to run
# the make install target.
# The standard default location is /usr/local , in order to change it add the choosen location
# to the configure step. Use the prefix flag :
#
#   --prefix=/usr/local
#
# And then, after make completes, to install it:
#

$ sudo make install
[sudo] password for rcrr: 
Installing libflame.a into /usr/local/lib/
Installing FLAME.h into /usr/local/include/



#
# To clean everything, and start over: 
#

$ make cleanmk
$ make cleanleaves
$ make cleanlib
$ make cleanh
$ make clean
$ make distclean

#
# Or to make it in one command:
#

$ make cleanmk cleanleaves cleanlib cleanh clean distclean


#
# Install libFLAME for Reversi
#
# To install the library and the header files, and make them available to the Reversi
# project, copy them to their specific appropriate directories, where the $REVERSI_HOME
# is the home directory of the Reversi installation.
#

$ rhash --sha3-256 lib/x86_64-unknown-linux-gnu/libflame.a
7f5cce500594ed4bf4aebace78e5c3c1fb984acb3ddb8252f21bb7ce4ad9fbc8  lib/x86_64-unknown-linux-gnu/libflame.a
$ cp lib/x86_64-unknown-linux-gnu/libflame.a $REVERSI_HOME/c/ext/lib/libflame.a.7f5cce500594ed4bf4aebace78e5c3c1fb984acb3ddb8252f21bb7ce4ad9fbc8

# change directory into $REVERSI_HOME/c/ext/lib
$ ln -sf libflame.a.7f5cce500594ed4bf4aebace78e5c3c1fb984acb3ddb8252f21bb7ce4ad9fbc8 libflame.a

$ cp include/x86_64-unknown-linux-gnu/FLAME.h .
$ sed -i 's/ftnlen/ftnlen_flame/g' FLAME.h
$ rhash --sha3-256 FLAME.h 
9c5bfcacc0d3ad20bc0bf6538e2e4da89240824cc022c7ef61f6eeeedbde0331  FLAME.h
$ mv FLAME.h $REVERSI_HOME/c/ext/include/FLAME.h.9c5bfcacc0d3ad20bc0bf6538e2e4da89240824cc022c7ef61f6eeeedbde0331

# change directory into $REVERSI_HOME/c/ext/include
$ ln -sf FLAME.h.9c5bfcacc0d3ad20bc0bf6538e2e4da89240824cc022c7ef61f6eeeedbde0331 FLAME.h



#
# Compiling with libFLAME
#
# The Reversi Makefile expects to find the static library in the c/ext/lib directory
# and the header file in c/ext/include
#
# C source files calling LAPACK or FLAME functions need to include the "FLAME.h" header as here described.
#

#include "stdio.h"
#include "stdlib.h"
#include "otherstuff.h"
#include "FLAME.h"



###
### Final remarks
###

#
# Is it possible to include blis.h and FLAME.h in the same source file ?
#
# yes it is , but there is some work to do.
#
# blis.h and FLAME.h have a few edges to be smoothed.
#
# (1) The ftnlen typedef is conflicting among the two files.
#     Solution: Open FLAME.h and search-replace ftnlen with ftnlen_flame
#               One option is to run a sed replace command ...
#               $ sed -i 's/ftnlen/ftnlen_flame/g' FLAME.h
#
# (2) Both files are defining the BLAS API.
#     Solution: before the line:
#                 #include "blis.h"
#               add the macro:
#                 #define BLIS_DISABLE_BLAS_DEFS
#     Note: BLAS implementation is supplied by the BLIS library, would it be more
#           natural to have the definition in blis.h, but it is not possible to remove
#           them from FLAME.h ...
#
# (3) Many static function are defined by blis.h , and during compilation there are warnings
#     of type -Wunused-function for each of them.
#     Solution: wrap the heder include statement as follow:
#               #pragma GCC diagnostic push
#               #pragma GCC diagnostic ignored "-Wunused-function"
#               #include "blis.h"
#               #pragma GCC diagnostic pop
#
# (4) Not all the LAPACK functions contained by the FLAME library are defined in the header file.
#     For instance dpotrf_ is defined , dpotrs_ is not.
#     Solution: add the following two lines to define dpotrs_
#               #define F77_dpotrs F77_FUNC( dpotrs , DPOTRS )
#               int F77_dpotrs(char* uplo, int* n, int* nrhs, double* a, int* lda, double* b, int* ldb, int* info);
#
#
