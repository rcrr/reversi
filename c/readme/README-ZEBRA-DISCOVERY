
List of ideas and hints collected investigating the Zebra source code:

  (01) Makefile
       Use of the makedepend tool. The tool is installed with "sudo apt install xutils-dev".
       The tool simplifies the structure of the makefile but preserves the fine graing dependency structure od the code.

  (02) ...

  (xx) ...

--- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---

Program scrzebra, source code analysis. 

  scrzebra.c defines the macro SCRZEBRA and icludes zebra.c

  zebra.c defines SCIPT_ONLY TRUE when is defined SCRZEBRA

  main: Interprets the command-line parameters and starts the game.
  
    First there is a large part dedicated to command line parameters.

    Then the sequence of calls is:
    
      global_setup()
      init_thor_database()
      my_srandom()
      run_endgame_script()
      global_terminate()
      
    program exit.

  (A) global_setup
      Initialize the different sub-systems.
      It is defined in game.c. It calls:
      
        init_hash(hash_bits);
        init_bitboard();
        init_moves();
        init_patterns();
        init_coeffs();
        init_timer();
        init_probcut();
        init_stable();
        setup_search();

      and returns.
      
  (A.0) init_hash
        Defined in hash.c.
        Allocate memory for the hash table.

  (A.1) init_bitboard 
        Defined in bitboard.c.
        Assigns values to the square_mask array defined as:
        
          BitBoard square_mask[100];
          
        the struct BitBoard is defined in bitboard.h as:

          typedef struct {
            unsigned int high;
            unsigned int low;
          } BitBoard;

  (A.2) init_moves
        Defined in moves.c.
        Initialize the move generation subsystem.

        In particular initialize the two arrays:
        
          flip_direction
          first_flip_direction
          
        defined global in moves.c as:
        
          int *first_flip_direction[100];
          int flip_direction[100][16];   /* 100 * 9 used */

  (A.3) init_patterns
        Defined in patterns.c.
        Pre-computes some tables needed for fast pattern access.

        Calls transformation_setup that populates the flip8 array.

        Populates row_no, row_index, col_no, col_index arrays.

        Calls pattern_dependency that populates depend_lo and depend_hi.
        
  (A.4) init_coeffs
        Defined in getcoeff.c.
        Manages the initialization of all relevant tables.
        Reads the file coeffs2.bin.
        
  (A.5) init_timer
        Defined in timer.c.
        Initializes the timer. This is really only needed when
          CRON_SUPPORTED is defined; in this case the cron daemon
          is used for timing.

  (A.6) init_probcut
        Defined in probcut.c.
        Clears the tables with MPC information and chooses some reasonable cut pairs.

  (A.7) init_stable
        Defined in stable.c
        Build the table containing the stability masks for all edge
        configurations. This is done using dynamic programming.

  (A.8) setup_search
        Defined in seach.c.
        Initialize the history of the game in the search driver.
        Initalize the self-organizing move lists.

  (B) init_thor_database
      Defined in thordb.c.
      Performs the basic initializations of the Thor database interface.

  (C) my_srandom
      Defined in myrandom.c.
      Initialize the random number generator based on the given seed.

  (D) run_endgame_script
      Defined in zebra.c.
      It is the entry to the game solver for the given list of positions.
      
        Opens the input file
        Opens the output files
        Makes a few preparation steps
        Scans the script file (input)
        Foreach line:
          Parses the line
          game_init: Prepare the relevant data structures so that a game can be played.
          Prepares data structures used to access the book.
          setup_hash: Determine randomized hash masks.
          compute_move : it is the entry point of the game evaluation ...

  (E) global_terminate
      Defined in game.c.
      Free all dynamically allocated memory.
      it calls:

        free_hash
        clear_coeffs
        clear_osf

Going down the stack we find the following functions:

   compute_moves      : game.c
   end_game           : end.c
   end_tree_wrapper   : end.c
   end_tree_search    : end.c

Let's get into the details:

   *** 01 ***
   compute_moves
   Returns the best move in a position given search parameters.

   int
   compute_move( int side_to_move,              0
                 int update_all,                1 (TRUE)
                 int my_time,                   100000000
                 int my_incr,                   0
                 int timed_depth,               0
                 int book,                      0
                 int mid,                       60
                 int exact,                     60
                 int wld,                       60
                 int search_forced,             1 (TRUE)
                 EvaluationType *eval_info )    Not initialized, it is out info

   *** 02 ***
   end_game
   Provides an interface to the fast endgame solver.

   int
   end_game( int side_to_move,                  0
             int wld,                           0
	     int force_echo,                    0
	     int allow_book,                    0
	     int komi,                          0
	     EvaluationType *eval_info )
                                                end_game: eval_info->type = 8 (UNINITIALIZED_EVAL)

   *** 03 ***
   end_tree_wrapper
   Wrapper onto END_TREE_SEARCH which applies the knowledge that
   the range of valid scores is [-64,+64].  Komi, if any, is accounted for.

   static int
   end_tree_wrapper( int level,
                     int max_depth,
                     int side_to_move,
                     int alpha,
                     int beta,
                     int selectivity,
                     int void_legal )
                     
   *** 04 ***
   end_tree_search
   Plain nega-scout with fastest-first move ordering.
   
   static int
   end_tree_search( int level,
                    int max_depth,
                    BitBoard my_bits,
                    BitBoard opp_bits,
                    int side_to_move,
                    int alpha,
                    int beta,
                    int selectivity,
                    int *selective_cutoff,
                    int void_legal )

It is an 800 lines very sofisticated function. it is not really a "fastest-first" only function !!!

--- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---

Activities log ( in Italian, I am sorry :) )


Appunti al 23-01-2022

Ho il report di valgrind/callgrind, ottenuto rimuovend il flag -s e aggiungendo -g alle opzioni di compilazione.

Ho capito che il programma tune8dbs esegue il calcolo dei pesi partendo dalle posizioni risolte (REGAB/RGLM).



Appunti al 16-01-2022


GIT commit e14fd239d2626f5c228863e7b1a388c33e6e6729

La nuova versione del solver GVE ( Game Value Estimator ) e' completa.
GVE e' basato su diverse tecnologie:

 - EV ( Evaluation Function ) costruita sui patterns preparati con le metodologie di M. Buro
 - Game Tree search basato sulla tesi di Aske Plaat con metodo MTD(f)
 - TT ( Transposition Table ) costruita con Hashtable e Binary-Heap

Sostanzialmante equivalente a quanto descritto da Gunnar Andersson ( gunnar@radagast.se ) nella pagina http://www.radagast.se/othello dove
viene descritto il software da Lui sviluppato: Zebra.

E' interessante notare come Zebra e' comunque molto piu' veloge di Reversi GVE, nel range 3x - 10x.

Avvio quindi una "campagna" di studio di Zebra, al fine di studiare e comprendere le tecniche ivi adottate.

Zebra e' distribuito da Gunnar con Licenza GPL v2 quindi manterro' nel repository git di Reversi le piccole modifiche che introduco in Zebra.

ScrZebra e' la abbreviazione di "SCRiptable endgame solver ZEBRA".
E' un programma standalone che si usa da riga di comando, in sostanza equivalente a endgame_solver. Impiega lo stesso endgame solver di WZebra.

Costituite le directory original e working_copy, in modo da avere sempre l'originale di Gunnar e una mia copia di lavoro.

Ho visto che nel 2013 avevo gia' eseguito il gruppo di 21 posizioni di test su whitewater:

  Macchina   | sec   | nps
 ------------+-------+------------
  whitewater | 3,225 | 12,348,808
  acheron    | 2,113 | 18,853,033

L'aspetto fondamentale pero' e' il paragone tra Zebra e GVE che devo calcolare in dettaglio ...

                          || Zebra                             || GVE
 --------------------+----++-----------------------------------++---------------------------------------
  Posizione          | ec || sec  | nodes         | nps        || sec     | nodes          | nps        
 --------------------+----++------+---------------+------------++---------+----------------+------------
  ffo-50             | 26 || 99.3 | 2,062,379,691 | 20,772,951 ||  3241.4 | 44,789,355,328 | 13,818,347
  woc18-FKvsAP-g1-22 | 22 ||  1.5 |    27,503,551 | 18,350,552 ||     3.1 |     36,061,366 | 11,632,699

Ci sono diversi commenti da fare:

La velocita' di navigazione del game tree e' a favore di Zebra che e' 1.5x piu' veloce. Non e' molto ma sara' interessante capire come mai.

Ogni PLY porta circa un 3x di complessita', infatti 1.5 x 3^4 fa 120 che come ordine di grandezza e' consistente con i 99s impiegati per la posizione ffo-50.
Dove il valore dell'esponente 4 nella formula 3^4 e' dato dalla differenza di ec ( 26 - 22 ) tra le due posizioni.

GVE invece non e' consistente nella crescita del tempo di risoluzione che sale di 1,000 volte invece che di 100.

Vengono spesi 73 secondi per tutti gli step di ID prima dell'ultimo, espandendo 27,815,363 di nodi ( 0.38M nps, quindi molto lento, ma e' cosa nota ),
Poi si entra nella ultima fase, e si giunge velocemente ad affermare che la mossa D8 vale +10, che poi si rivelera' la mossa migliore.
Solo altri 12 secondi, per un totale di 835,412,840 nodi navigati !!!
Ma poi si spendono ulteriori 53 minuti e 44 MLD di nodi per verificare che tutte le altre mosse sono peggiori.

  Sun Jan 16 16:37:32 2022 #### start  .99. Iterative deepening search depth = 99
  Sun Jan 16 16:37:32 2022 00 - D8 (+08) [+06..+08]: (failing high) f- = +08 - cumulated node count    161170309
  Sun Jan 16 16:37:41 2022 00 - D8 (+08) [+08..+10]: (failing high) f- = +10 - cumulated node count    200488376
  Sun Jan 16 16:37:44 2022 00 - D8 (+10) [+10..+12]: (failing low)  f+ = +10 - cumulated node count    835412840
  Sun Jan 16 16:38:30 2022 01 - G8 (+08) [+10..+12]: (failing low)  f+ = +10 - cumulated node count   1889879562
  Sun Jan 16 16:39:47 2022 02 - B2 (+08) [+10..+12]: (failing low)  f+ = +10 - cumulated node count   3069926863
  Sun Jan 16 16:41:17 2022 03 - G2 (+08) [+10..+12]: (failing low)  f+ = +10 - cumulated node count   4834391805
  Sun Jan 16 16:43:25 2022 04 - A3 (+08) [+10..+12]: (failing low)  f+ = +10 - cumulated node count   5114393268
  Sun Jan 16 16:43:51 2022 05 - H2 (+08) [+10..+12]: (failing low)  f+ = +10 - cumulated node count   7602693600
  Sun Jan 16 16:46:49 2022 06 - A2 (+08) [+10..+12]: (failing low)  f+ = +10 - cumulated node count  11049459118
  Sun Jan 16 16:50:44 2022 07 - H7 (+08) [+10..+12]: (failing low)  f+ = +10 - cumulated node count  18888427176
  Sun Jan 16 16:59:44 2022 08 - B8 (+08) [+10..+12]: (failing low)  f+ = +10 - cumulated node count  33371948764
  Sun Jan 16 17:16:25 2022 09 - A4 (+08) [+10..+12]: (failing low)  f+ = +10 - cumulated node count  34659109105
  Sun Jan 16 17:18:00 2022 10 - A5 (+08) [+10..+12]: (failing low)  f+ = +10 - cumulated node count  36507861544
  Sun Jan 16 17:20:17 2022 11 - A6 (+08) [+10..+12]: (failing low)  f+ = +10 - cumulated node count  37439610850
  Sun Jan 16 17:21:27 2022 12 - A7 (+08) [+10..+12]: (failing low)  f+ = +10 - cumulated node count  41392285796
  Sun Jan 16 17:25:52 2022 13 - B7 (+08) [+10..+12]: (failing low)  f+ = +10 - cumulated node count  41988427463
  Sun Jan 16 17:26:40 2022 14 - G7 (+08) [+10..+12]: (failing low)  f+ = +10 - cumulated node count  44789355328
  Sun Jan 16 17:30:04 2022 #### finish .99. Best move and game value: [D8:+10] - nc =  44761539965 - Time [REAL][PROC]: [  3152.249625594][  3152.433979436]

C'e' evidentemente qualcosa che NON va.

Prossimo step e' di aggiungere qualche ulteriore posizione a questa analisi comparativa per capire se si tratta di una disfunzione ricorrente o saltuaria. 



