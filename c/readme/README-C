
  README-C

  Copyright (c) 2012, 2014, 2024 Roberto Corradini. All rights reserved.

  This file is part of the reversi program
  http://github.com/rcrr/reversi

  This program is free software; you can redistribute it and/or modify it
  under the terms of the GNU General Public License as published by the
  Free Software Foundation; either version 3, or (at your option) any
  later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA
  or visit the site <http://www.gnu.org/licenses/>.

This file describes the configuration and settings done to prepare the C environment used to develop and execute
the REVERSI program.

Software components being used are:

 - Ubuntu 24.04.1 LTS (x86_64)
 - gcc (Ubuntu 13.2.0-23ubuntu4) 13.2.0
 - GNU C Library (Ubuntu GLIBC 2.39-0ubuntu8.3) stable release version 2.39
 - doxygen 1.9.8
 - psql (PostgreSQL) 16.4 (Ubuntu 16.4-0ubuntu0.24.04.2)
 - libpq-dev 16.4-0ubuntu0.24.04.2 amd64
 - libbliss : https://github.com/flame/blis
 - libflame : https://github.com/flame/libflame
 - openmp
 - blas

After having completed the Ubuntu installation, clone the REVERSI git repository:

  $ git clone https://github.com/rcrr/reversi.git reversi

From now on the reversi directory will be named REVERSI_HOME.

Configure your git properties, user.name and user.email.
Eventualy change the origin address from https to ssh.
For myself username is rcrr and email is rob_corradini@yahoo.it. Your values will be different.

  $ git config user.name rcrr
  $ git config user.email rob_corradini@yahoo.it
  $ git remote set-url origin ssh://git@github.com/rcrr/reversi.git

Beside git ( being already installed ) a few more packages are needed.

  # apt install build-essential
  # apt install gfortran
  # apt install rhash
  # apt install libpq-dev
  # apt install libblas-dev
  # apt install doxygen
  # apt install graphviz

Install the two C libraries BLIS and FLAME following the instructions found into the README file

  - $(REVERSI_HOME)/ext/README-BLIS-FLAME


Open a terminal, change directory to REVERSI_HOME and run the following commands:

  $ make clean
  $ make
  $ make test
  $ make doxygen
  $ make endgame_log_files
  $ make endgame_pv_files
  $ make dat2csv
  $ make asm

Everything is build under the ./build directory.
One shared library is generated, used by the python code, in ./build/lib:

  reversi.so

Nine executables are created in ./build/bin:

 endgame_solver
 gpdb_verify
 intel_intrinsics_trial
 read_game_tree_log
 read_pve_dump
 regab
 rglm
 rglmw
 utest

endgame_solver is the main program, it is the entry point for several solvers and utilities.
Run 'endgame_solver -h' for help and options.

gpdb_verify (game position database consistency verifier) is a tool that reads and verifies a file based database of game position.
Run 'gpdb_verify -h' for help and options.

regab (reversi endgame analytics base) is a tool to generate, solve and extract game positions from an SQL database.
Run 'regab -h' for help and options.

rglm (reversi generalized linear model solver) is a group of tools dedicated to solve and process a model to estimate the outcome of a game.
Run 'rglm -h' for help and options.

rglmw (reversi generalized linear model weights) is a tool used to evaluate the goodnes of a computed model.
Run 'rglmw -h' for help and options.

utest is an unit test utility.
Run 'utest -h' for help and options.

Following some examples to practice with the tools provided by the project.

Use utest to run a specific unit test:

  $ ./build/bin/utest ./build/test/bin/ut_board -p /board/game_position_x_has_any_legal_move

Or the full unit:

  $ ./build/bin/utest ./build/test/bin/ut_board

Access the database of game positions using the gpdb_verify executable:

  $ ./build/bin/gpdb_verify -f db/gpdb-ffo.txt -p
  $ ./build/bin/gpdb_verify -f db/gpdb-ffo.txt -q ffo-29

Solve the game position from the database calling endgame_solver:

  $ ./build/bin/endgame_solver -f db/gpdb-ffo.txt -s es -q ffo-29

